- filename: "StorefrontProductQuantityChangesInBackendAfterCustomerCheckoutTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "StorefrontProductQuantityChangesInBackendAfterCustomerCheckoutTest"
      title: ""
      description: ""
- filename: "GiftCardNotificationTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "GiftCardNotificationTest"
      title: "System shows notification if GiftCard is added/removed"
      description: "System shows notification if GiftCard is added/removed"
- filename: "StorefrontUSCustomerCheckoutWithCouponAndBankTransferPaymentMethodTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "StorefrontUSCustomerCheckoutWithCouponAndBankTransferPaymentMethodTest"
      title: ""
      description: ""
- filename: "StorefrontCheckoutWithSpecialPriceProductsTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "StorefrontCheckoutWithSpecialPriceProductsTest"
      title: ""
      description: ""
- filename: "StorefrontGuestCheckoutUsingFreeShippingAndTaxesTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "StorefrontGuestCheckoutUsingFreeShippingAndTaxesTest"
      title: ""
      description: ""
- filename: "ZeroSubtotalOrdersWithProcessingStatusTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "ZeroSubtotalOrdersWithProcessingStatusTest"
      title: ""
      description: ""
- filename: "StorefrontCheckoutWithDifferentShippingAndBillingAddressAndProductWithTierPricesTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "StorefrontCheckoutWithDifferentShippingAndBillingAddressAndProductWithTierPricesTest"
      title: ""
      description: ""
- filename: "StorefrontGuestCheckoutWithCouponAndZeroSubtotalTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "StorefrontGuestCheckoutWithCouponAndZeroSubtotalTest"
      title: ""
      description: ""
- filename: "StorefrontCheckoutWithDifferentShippingAndBillingAddressAndRegisterCustomerAfterCheckoutTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "StorefrontCheckoutWithDifferentShippingAndBillingAddressAndRegisterCustomerAfterCheckoutTest"
      title: ""
      description: ""
- filename: "StorefrontUKGuestCheckoutWithConditionProductQuantityEqualsToOrderedQuantityTest.xml"
  module: "CheckoutStaging"
  tests:
    - testname: "StorefrontUKGuestCheckoutWithConditionProductQuantityEqualsToOrderedQuantityTest"
      title: ""
      description: ""
- filename: "OnePageCheckoutWithAllProductTypesAndGiftCardProductTest.xml"
  module: "GiftCard"
  tests:
    - testname: "OnePageCheckoutWithAllProductTypesAndGiftCardProductTest"
      title: "OnePageCheckout with all product types test with Gift Card"
      description: "Checkout with all product types with Gift Card"
- filename: "AdminMoneyRefundingGiftCardPartialRefundTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminMoneyRefundingGiftCardPartialRefundTest"
      title: "Checking money refunding to the Gift card during partial refund"
      description: "Checking money refunding to the Gift card during partial refund"
- filename: "StorefrontGiftCardValidationTest.xml"
  module: "GiftCard"
  tests:
    - testname: "StorefrontGiftCardValidationTest"
      title: "Storefront Open Virtual GiftCard form validation"
      description: "Should see validation errors when storefront form is invalid"
- filename: "StorefrontDeleteGiftCardProductFromMiniShoppingCartTest.xml"
  module: "GiftCard"
  tests:
    - testname: "StorefrontDeleteGiftCardProductFromMiniShoppingCartTest"
      title: "Storefront Delete Gift Card Product From Mini Shopping Cart Test"
      description: "Test log in to GiftCard and  Delete Gift Card Product From Mini Shopping Cart Test"
- filename: "AdminCreateGiftCardWithRequiredFieldsOnlyTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardWithRequiredFieldsOnlyTest"
      title: "Admin create gift card product cart with required fields only test"
      description: "Admin should be able to create gift cart with required fields only and assign it to the category"
- filename: "AdminCreateOpenGiftCardTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardOpenTest"
      title: "Create an open gift card"
      description: "Should be able to create a gift card with open amount available"
- filename: "AdminCreateGiftCardProductOfCombinedTypeWithOpenAmountTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardProductOfCombinedTypeWithOpenAmountTest"
      title: "Admin create gift card product cart of combined type with amount test"
      description: "Admin should be able to create gift cart of combined type with amount"
- filename: "AdminCreateGiftCardProductOutOfStockOfVirtualTypeWithoutWebsiteTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardProductOutOfStockOfVirtualTypeWithoutWebsiteTest"
      title: "Admin create gift card product cart out of stock of virtual type without website test"
      description: "Admin should be able to create gift cart out of stock of virtual type without website"
- filename: "DeleteGiftCardProductFromShoppingCartTest.xml"
  module: "GiftCard"
  tests:
    - testname: "DeleteGiftCardProductFromShoppingCartTest"
      title: "Delete gift card product from shopping cart test"
      description: "Delete gift card product from shopping cart"
- filename: "AdminCreateAndEditVirtualGiftCardProductSettingsTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateAndEditVirtualGiftCardProductSettingsTest"
      title: "Admin should be able to set/edit other product information when creating/editing a virtual gift card product"
      description: "Admin should be able to set/edit other product information when creating/editing a virtual gift card product"
- filename: "StorefrontPrintGiftCardOrderGuestTest.xml"
  module: "GiftCard"
  tests:
    - testname: "StorefrontPrintGiftCardOrderGuestTest"
      title: "Print Order from Guest on Frontend with gift card"
      description: "Print Order from Guest on Frontend with gift card"
- filename: "AdminRemoveDefaultImageGiftCardProductTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminRemoveDefaultImageGiftCardProductTest"
      title: "Admin should be able to remove default images from a Gift Card Product"
      description: "Admin should be able to remove default images from a Gift Card Product"
- filename: "AdminCreateGiftCardProductOfPhysicalTypeTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardProductOfPhysicalTypeTest"
      title: "Admin create gift card product cart of physical type test"
      description: "Admin should be able to create gift cart of physical type"
- filename: "EndToEndB2CAdminTest.xml"
  module: "GiftCard"
  tests:
    - testname: "EndToEndB2CAdminTest"
      title: ""
      description: ""
- filename: "AdminCreateGiftCardProductOfVirtualTypeTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardProductOfVirtualTypeTest"
      title: "Admin create gift card product of virtual type test"
      description: "Admin should be able to create gift card product of virtual type"
- filename: "StorefrontInstantPurchaseFunctionalityNegativeScenarioTest.xml"
  module: "GiftCard"
  tests:
    - testname: "StorefrontInstantPurchaseFunctionalityNegativeScenarioTest"
      title: ""
      description: ""
- filename: "AdminCreateGiftCardProductOfCombinedTypeWithCustomOptionsTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardProductOfCombinedTypeWithCustomOptionsTest"
      title: "Admin create gift card product cart of combined type with custom options test"
      description: "Admin should be able to create gift cart of combined type with custom options"
- filename: "AdvanceCatalogSearchGiftCardProductByNameTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdvanceCatalogSearchGiftCardProductByNameTest"
      title: "Guest customer should be able to advance search Gift Card product with product name"
      description: "Guest customer should be able to advance search GiftCard product with product name"
- filename: "AdvanceCatalogSearchGiftCardProductByShortDescriptionTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdvanceCatalogSearchGiftCardProductByShortDescriptionTest"
      title: "Guest customer should be able to advance search Gift Card product with product short description"
      description: "Guest customer should be able to advance search Gift Card product with product short description"
- filename: "AdvanceCatalogSearchGiftCardProductByPriceTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdvanceCatalogSearchGiftCardProductByPriceTest"
      title: "Guest customer should be able to advance search Gift Card product with product price"
      description: "Guest customer should be able to advance search Gift Card product with product price"
- filename: "AdvanceCatalogSearchGiftCardProductByDescriptionTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdvanceCatalogSearchGiftCardProductByDescriptionTest"
      title: "Guest customer should be able to advance search Gift Card product with product description"
      description: "Guest customer should be able to advance search Gift Card product with product description"
- filename: "AdvanceCatalogSearchGiftCardProductBySkuTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdvanceCatalogSearchGiftCardProductBySkuTest"
      title: "Guest customer should be able to advance search Gift Card product with product sku"
      description: "Guest customer should be able to advance search Gift Card product with product sku"
- filename: "AdminCreateGiftCardProductWithCustomLifeTimeTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardProductWithCustomLifeTimeTest"
      title: "Admin create gift card product cart of physical type with custom life time test"
      description: "Admin should be able to create gift cart of physical type with custom life time"
- filename: "AdminAddDefaultImageGiftCardProductTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminAddDefaultImageGiftCardProductTest"
      title: "Admin should be able to add default images for a Gift Card Product"
      description: "Admin should be able to add default images for a Gift Card Product"
- filename: "StorefrontInstantPurchaseFunctionalityTest.xml"
  module: "GiftCard"
  tests:
    - testname: "StorefrontInstantPurchaseFunctionalityTest"
      title: ""
      description: ""
- filename: "StorefrontAdvanceCatalogSearchGiftCardProductBySkuWithHyphenTest.xml"
  module: "GiftCard"
  tests:
    - testname: "StorefrontAdvanceCatalogSearchGiftCardProductBySkuWithHyphenTest"
      title: "Guest customer should be able to advance search Gift Card product with product sku that contains hyphen"
      description: "Guest customer should be able to advance search Gift Card product with product sku that contains hyphen"
- filename: "AdminAddRemoveDefaultVideoGiftCardProductTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminAddRemoveDefaultVideoGiftCardProductTest"
      title: "Admin should be able to add/remove default product video for a Gift Card Product"
      description: "Admin should be able to add/remove default product video for a Gift Card Product"
- filename: "AdminCreateGiftCardTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCardTest"
      title: "Create a gift card"
      description: "Should be able to create a gift card with fixed amounts available"
- filename: "StorefrontVerifySecureURLRedirectGiftCardTest.xml"
  module: "GiftCard"
  tests:
    - testname: "StorefrontVerifySecureURLRedirectGiftCardTest"
      title: "Verify Secure URLs For Storefront Gift Card Pages"
      description: "Verify that the Secure URL configuration applies to the Gift Card pages on the Storefront"
- filename: "AdminCreateGiftCartProductOutOfStockOfVirtualTypeTest.xml"
  module: "GiftCard"
  tests:
    - testname: "AdminCreateGiftCartProductOutOfStockOfVirtualTypeTest"
      title: "Admin create gift card product cart out of stock of virtual type test"
      description: "Admin should be able to create gift cart out of stock of virtual type"
- filename: "NewProductsListWidgetGroupedProductTest.xml"
  module: "GroupedProductStaging"
  tests:
    - testname: "NewProductsListWidgetGroupedProductTest"
      title: ""
      description: ""
- filename: "GroupedProductLinksWithScheduleUpdateTest.xml"
  module: "GroupedProductStaging"
  tests:
    - testname: "GroupedProductLinksWithScheduleUpdateTest"
      title: "Product links should be kept for new staging versions"
      description: "When admin creates schedule updates for new product versions it is important to keep product attributes for them"
- filename: "AdminGroupedProductUpdateTestNoEndDateTest.xml"
  module: "GroupedProductStaging"
  tests:
    - testname: "AdminGroupedProductUpdateTestNoEndDateTest"
      title: "Admin should be able to create Single Future Update with no end date from Grouped Product Page"
      description: "Admin should be able to create Single Future Update with no end date from Grouped Product Page"
- filename: "AdminGroupedProductUpdateTestEndDateTest.xml"
  module: "GroupedProductStaging"
  tests:
    - testname: "AdminGroupedProductUpdateTestEndDateTest"
      title: "Admin should be able to create Single Future Update with end date from Grouped Product Page"
      description: "Admin should be able to create Single Future Update with end date from Grouped Product Page"
- filename: "AdminDynamicBlockProductListWidgetTest.xml"
  module: "Banner"
  tests:
    - testname: "DynamicBlockWithProductListWidgetTest"
      title: "Product list widgets works inside a dynamic block"
      description: "User can use the product list widget inside a dynamic block without errors for add to cart and compare"
- filename: "AdminAddImageToWYSIWYGBannerTest.xml"
  module: "Banner"
  tests:
    - testname: "AddMediaGalleryToBannerTest"
      title: "Admin add media gallery to WYSIWYG of Banner Page"
      description: "Admin add media gallery to WYSIWYG of Banner Page"
- filename: "VerifyTinyMCEv4IsNativeWYSIWYGOnBannerTest.xml"
  module: "Banner"
  tests:
    - testname: "DefaultTinyMCEv4onBannerPageTest"
      title: "Admin see TinyMCEv4.6 is native WYSIWYG on Banner Page"
      description: "Admin see TinyMCEv4.6 is native WYSIWYG on Banner Page"
- filename: "AdminAddWidgetToWYSIWYGWithCategoryLinkTypeOnBannerTest.xml"
  module: "Banner"
  tests:
    - testname: "AdminCreateBannerWithCategoryLinkTest"
      title: "Admin create banner with widget type catalog category link"
      description: "Admin create banner with widget type catalog category link"
- filename: "AdminAddNestedBannerWithImageTest.xml"
  module: "Banner"
  tests:
    - testname: "AdminAddNestedBannerWithImageTest"
      title: "Content of Nested Dynamic block is rendered on Storefront"
      description: "Content of CMS page with nested Dynamic block is rendered on Storefront"
- filename: "AdminAddVariableToWYSIWYGBannerTest.xml"
  module: "Banner"
  tests:
    - testname: "InsertDefaultMagentoVariableIntoWYSIWYGOnBannerPagesTest"
      title: "Insert default Magento variable into content of WYSIWYG on Banner"
      description: "Insert default Magento variable into content of WYSIWYG on Banner"
- filename: "VerifyAdminAssociateCustomerSegmentToBannerTest.xml"
  module: "Banner"
  tests:
    - testname: "AssociateCustomerSegmentToBannerTest"
      title: "Dynamic Block display only for customer segment it is created for"
      description: "Dynamic Block display only for customer segment it is created for"
- filename: "AdminContentDynamicBlocksNavigateMenuTest.xml"
  module: "Banner"
  tests:
    - testname: "AdminContentDynamicBlocksNavigateMenuTest"
      title: "Admin content dynamic blocks navigate menu test"
      description: "Admin should be able to navigate to Content &gt; Dynamic Blocks"
- filename: "AdminApplyBannerToDifferentAdminRoleTest.xml"
  module: "Banner"
  tests:
    - testname: "AdminApplyBannerToDifferentAdminRoleTest"
      title: "Admin role has access to banner that created for storeview he has access to"
      description: "Admin role has access to banner that created for storeview he has access to"
- filename: "AdminCreateEditBannerForSpecificStoreViewTest.xml"
  module: "Banner"
  tests:
    - testname: "AdminCreateEditBannerForSpecificStoreViewTest"
      title: "Admin create and edit banner for specifice store view"
      description: "Admin create and edit banner for specifice store view"
- filename: "CartPriceRuleWithRelatedBannerIsPersistedUnderLongTermCookieTest.xml"
  module: "Banner"
  tests:
    - testname: "CartPriceRuleWithRelatedBannerIsPersistedUnderLongTermCookieTest"
      title: "Cart Price Rule with related Banner for specific Customer Segment is persisted under long-term cookie"
      description: "Verify that Cart Price Rule is persisted under long-term cookie. Verify Customer Group Membership and Segmentation persistence under long-term cookie. Verify related Banners persistence under long-term cookie"
- filename: "AdminCmsPageSaveIsReportedTest.xml"
  module: "Logging"
  tests:
    - testname: "AdminCmsPageSaveIsReportedTest"
      title: "Changes to CMS pages reported to Action Log"
      description: "Changes to CMS pages reported to Action Log"
- filename: "AdminSystemReportNavigateMenuTest.xml"
  module: "Logging"
  tests:
    - testname: "AdminSystemReportNavigateMenuTest"
      title: "Admin system &gt; report navigate menu test"
      description: "Admin should be able to navigate to System &gt; Report"
- filename: "AdminScrubSecureDataFromUserCreationLogsTest.xml"
  module: "Logging"
  tests:
    - testname: "AdminScrubSecureDataFromUserCreationLogsTest"
      title: "Admin scrub secure data from user creation logs test"
      description: "Scrub secure data from user creation logs"
- filename: "AdminSystemArchiveNavigateMenuTest.xml"
  module: "Logging"
  tests:
    - testname: "AdminSystemArchiveNavigateMenuTest"
      title: "Admin system archive navigate menu test"
      description: "Admin should be able to navigate to System &gt; Archive"
- filename: "StorefrontCustomerCheckoutWithEnabledAddressSearchAndNoAddressesTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerCheckoutWithEnabledAddressSearchAndNoAddressesTest"
      title: "One Page Checkout with Customer Addresses Search - Customer has no shipping/billing address"
      description: "One Page Checkout with Customer Addresses Search - Customer has no shipping/billing address"
- filename: "StorefrontCustomerCheckoutWithTwoAddressesAndEnabledAddressSearchWithNotReachedLimitTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerCheckoutWithTwoAddressesAndEnabledAddressSearchWithNotReachedLimitTest"
      title: "One Page Checkout with Customer Addresses Search - Specified limit is not reached"
      description: "One Page Checkout with Customer Addresses Search - Specified limit is not reached"
- filename: "StorefrontCustomerCheckoutWithEnabledAddressSearchAndVirtualProductTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerCheckoutWithEnabledAddressSearchAndVirtualProductTest"
      title: "One Page Checkout with virtual product and Customer Addresses Search - Specified limit is reached"
      description: "One Page Checkout with virtual product and Customer Addresses Search - Specified limit is reached"
- filename: "StorefrontCustomerCheckoutWithTwoAddressesAndEnabledAddressSearchTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerCheckoutWithTwoAddressesAndEnabledAddressSearchTest"
      title: "One Page Checkout with Customer Addresses Search - Search on shipping step"
      description: "One Page Checkout with Customer Addresses Search - Search on shipping step"
- filename: "StorefrontCustomerCheckoutProductSearchBillingAddressTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerCheckoutProductSearchBillingAddressTest"
      title: "One Page Checkout with Customer Addresses Search - Search on billing step"
      description: "One Page Checkout with Customer Addresses Search - Search on billing step"
- filename: "StorefrontCustomerCheckoutWithEnabledAddressSearchCreateNewShippingAddressTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerCheckoutWithEnabledAddressSearchCreateNewShippingAddressTest"
      title: "One Page Checkout with Customer Addresses Search - Add new shipping address"
      description: "One Page Checkout with Customer Addresses Search - Add new shipping address"
- filename: "StorefrontCustomerCheckoutWithEnabledAddressSearchCustomerAddressAttributeTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerCheckoutWithEnabledAddressSearchCustomerAddressAttributeTest"
      title: "One Page Checkout with Customer Addresses Search - Custom customer address attribute"
      description: "One Page Checkout with Customer Addresses Search - Custom customer address attribute"
- filename: "StorefrontCustomerProductSearchWithNewBillingAddressCheckoutTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerProductSearchWithNewBillingAddressCheckoutTest"
      title: "One Page Checkout with Customer Addresses Search - Add new billing address"
      description: "One Page Checkout with Customer Addresses Search - Add new billing address"
- filename: "StorefrontBillingAddressFormDoesNotAffectShippingAddressAfterUpdateTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontBillingAddressFormDoesNotAffectShippingAddressAfterUpdateTest"
      title: "Billing address form does not affect shipping address after update"
      description: "Billing address form does not affect shipping address after update"
- filename: "StorefrontCustomerCheckoutWithEnabledAddressSearchDisplayBillingAddressOnPaymentPageTest.xml"
  module: "CheckoutAddressSearch"
  tests:
    - testname: "StorefrontCustomerCheckoutWithEnabledAddressSearchDisplayBillingAddressOnPaymentPageTest"
      title: "One Page Checkout with Customer Addresses Search - Display Billing Address On Payment Page"
      description: "One Page Checkout with Customer Addresses Search - Display Billing Address On Payment Page"
- filename: "RelatedProductsRuleTest.xml"
  module: "PromotionPermissions"
  tests:
    - testname: "RelatedProductsRuleTest"
      title: "Products that are part of a related products rule that uses Price (percentage) condition"
      description: "Products that are part of a related products rule that uses Price (percentage) condition"
- filename: "AdminMarketingEmailRemindersNavigateMenuTest.xml"
  module: "Reminder"
  tests:
    - testname: "AdminMarketingEmailRemindersNavigateMenuTest"
      title: "Admin marketing email reminders navigate menu test"
      description: "Admin should be able to navigate to Marketing &gt; Email Reminders"
- filename: "NewProductsListWidgetDownloadableProductTest.xml"
  module: "DownloadableStaging"
  tests:
    - testname: "NewProductsListWidgetDownloadableProductTest"
      title: ""
      description: ""
- filename: "AdminDownloadableProductUpdateTestEndDateTest.xml"
  module: "DownloadableStaging"
  tests:
    - testname: "AdminDownloadableProductUpdateTestEndDateTest"
      title: "Admin should be able to create Single Future Update with end date from Downloadable Product Page"
      description: "Admin should be able to create Single Future Update with end date from Downloadable Product Page"
- filename: "AdminDownloadableProductUpdateTestNoEndDateTest.xml"
  module: "DownloadableStaging"
  tests:
    - testname: "AdminDownloadableProductUpdateTestNoEndDateTest"
      title: "Admin should be able to create Single Future Update with no end date from Downloadable Product Page"
      description: "Admin should be able to create Single Future Update with no end date from Downloadable Product Page"
- filename: "DisplayCmsContentOfSecondWebsiteWithSameUrlKeyTest.xml"
  module: "VersionsCms"
  tests:
    - testname: "DisplayCmsContentOfSecondWebsiteWithSameUrlKeyTest"
      title: "Displaying content on CMS page of second website with same URL key as first website"
      description: "Displaying content on CMS page of second website with same URL key as first website"
- filename: "VerifyCMSPageGetsSavedWithSameURLKeyForMultiStoreTest.xml"
  module: "VersionsCms"
  tests:
    - testname: "VerifyCMSPageGetsSavedWithSameURLKeyForMultiStoreTest"
      title: "Verify CMS page gets saved with same url key with hierarchy for multi store"
      description: "Verify CMS page gets saved with same url key with hierarchy for multi store"
- filename: "AdminContentHierarchyNavigateMenuTest.xml"
  module: "VersionsCms"
  tests:
    - testname: "AdminContentHierarchyNavigateMenuTest"
      title: "Admin content hierarchy navigate menu test"
      description: "Admin should be able to navigate to Content &gt; Hierarchy"
- filename: "AddSimpleProductWithTierPriceAndQtyMoreThanAvailableBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleProductWithTierPriceAndQtyMoreThanAvailableBySkuFromCustomerAccountTest"
      title: "Add simple product with tier price and qty more than available by sku from customer account test"
      description: "Add simple product with tier price qty more than available by sku from customer account"
- filename: "AddSimpleOutOfStockProductBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleOutOfStockProductBySkuFromCustomerAccountTest"
      title: "Add simple out of stock product by sku from customer account test"
      description: "Add simple out of stock product by sku from customer account"
- filename: "AddBundleFixedProductBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddBundleFixedProductBySkuFromCustomerAccountTest"
      title: "Add bundle fixed product by sku from customer account test"
      description: "Add bundle fixed product by sku from customer account"
- filename: "AddProductCustomOptionsToCartWithOrderBySkuWidgetTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddProductCustomOptionsToCartWithOrderBySkuWidgetTest"
      title: "Check that Simple product with custom options by compound sku, added by SKU from Widget to an Order"
      description: "Check that Simple product with custom options by compound sku, added by SKU from Widget to an Order"
- filename: "AdminCreateWidgetOrderBySkuTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AdminCreateWidgetOrderBySkuTest"
      title: "Create Widget Order By SKU"
      description: "Create Widget Order By SKU"
- filename: "DeleteSimpleAndDisabledProductsFromCartBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "DeleteSimpleAndDisabledProductsFromCartBySkuFromCustomerAccountTest"
      title: "Delete simple and disabled products from cart by sku from customer account test"
      description: "Delete simple and disabled products from cart by sku from customer account"
- filename: "DeleteOutOfStockProductFromCartBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "DeleteOutOfStockProductFromCartBySkuFromCustomerAccountTest"
      title: "Delete out of stock product from cart by sku from customer account test"
      description: "Delete out of stock product from cart by sku from customer account"
- filename: "AddNonexistentProductBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddNonexistentProductBySkuFromCustomerAccountTest"
      title: "Add nonexistent product by sku from customer account test"
      description: "Add nonexistent product by sku from customer account"
- filename: "AddProductNotValidQtyToCartOrderBySkuFromWidgetTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddProductNotValidQtyToCartOrderBySkuFromWidgetTest"
      title: "Check that shopping Cart is empty when Product with not valid qty added by SKU from Widget to an Order"
      description: "Check that shopping Cart is empty when Product with not valid qty added by SKU from Widget to an Order"
- filename: "AddSimpleDisabledProductBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleDisabledProductBySkuFromCustomerAccountTest"
      title: "Add simple disabled product by sku from customer account test"
      description: "Add simple disabled product by sku from customer account"
- filename: "AddTwoProductsToCartBySkuFromWidgetTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddTwoProductsToCartBySkuFromWidgetTest"
      title: "Check that 2 Simple products added by SKU from Widget to an Order"
      description: "Check that 2 Simple products added by SKU from Widget to an Order"
- filename: "AddConfigurableProductBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddConfigurableProductBySkuFromCustomerAccountTest"
      title: "Add configurable product by sku from customer account test"
      description: "Add configurable product by sku from customer account"
- filename: "AddSimpleProductsBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleProductsBySkuFromCustomerAccountTest"
      title: "Add simple products by sku from customer account test"
      description: "Add simple products by sku from my customer account"
- filename: "AddBundleDynamicProductBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddBundleDynamicProductBySkuFromCustomerAccountTest"
      title: "Add bundle dynamic product by sku from customer account test"
      description: "Add bundle dynamic product by sku from customer account"
- filename: "AdminConfProductAddedBySkuTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AdminConfProductAddedBySkuTest"
      title: "Check that Configurable product added by SKU to an Order"
      description: "Check that Configurable product added by SKU to an Order"
- filename: "AddSimpleProductBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleProductBySkuFromCustomerAccountTest"
      title: "Add simple product by sku from customer account test"
      description: "Add simple product by sku from customer account"
- filename: "AddSimpleProductWithDisplayingPricesConsideringMAPSettingsFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleProductWithDisplayingPricesConsideringMAPSettingsFromCustomerAccountTest"
      title: "Add simple product with displaying prices considering MAP settings by sku from customer account test"
      description: "Add simple product with displaying prices considering MAP settings by sku from customer account"
- filename: "AddConfigurableProductWithOutOfStockSubItemBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddConfigurableProductWithOutOfStockSubItemBySkuFromCustomerAccountTest"
      title: "Add configurable product with out-of-stock sub-items by sku from customer account test"
      description: "Add configurable product where all sub-items are out-of-stock by sku from customer account"
- filename: "AddSimpleProductWithNotValidQtyBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleProductWithNotValidQtyBySkuFromMyAccountTest"
      title: "Add simple product with not valid qty by sku from my account test"
      description: "Add simple product with not valid qty by sku from my account"
- filename: "AddProductToCartOrderBySkuFromWidgetTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddProductToCartOrderBySkuFromWidgetTest"
      title: "Check that Simple product added by SKU from Widget to an Order"
      description: "Check that Simple product added by SKU from Widget to an Order"
- filename: "AdminDifferentBillingAndShippingAddressTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AdminDifferentBillingAndShippingAddressTest"
      title: "Check that Billing and Shipping addresses pre-selected for customer with existing order in the cart"
      description: "Check Billing Address and Shipping Address"
- filename: "AddSimpleProductNotVisibleIndividuallyBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleProductNotVisibleIndividuallyBySkuFromCustomerAccountTest"
      title: "Add simple product not visible individually by sku from customer account test"
      description: "Add simple product for which visibility is set to not visible individually by sku from customer account"
- filename: "AddConfigurableProductToCartOrderBySkuWidgetTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddConfigurableProductToCartOrderBySkuWidgetTest"
      title: "Check that shopping Cart is empty when Configurable product added by SKU from Widget to an Order"
      description: "Check that shopping Cart is empty when Configurable product added by SKU from Widget to an Order"
- filename: "AddSimpleProductWithCustomOptionsByCompoundSkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleProductWithCustomOptionsByCompoundSkuFromCustomerAccountTest"
      title: "Add simple product  with custom options by compound sku from customer account test"
      description: "Add simple product with custom options by compound sku from customer account"
- filename: "DeleteConfigurableProductFromCartBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "DeleteConfigurableProductFromCartBySkuFromCustomerAccountTest"
      title: "Delete configurable product from cart by sku from customer account test"
      description: "Delete configurable product from cart by sku from customer account"
- filename: "AddProductBySkuWithEmptyQtyTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddProductBySkuWithEmptyQtyTest"
      title: "Updating grouped product after adding it by sku with empty qty"
      description: "Updating grouped product after adding it by sku with empty qty"
- filename: "AddBundleDynamicProductToCartOrderBySkuWidgetTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddBundleDynamicProductToCartOrderBySkuWidgetTest"
      title: "Check that shopping Cart is empty when Bundle dynamic product added by SKU from Widget to an Order"
      description: "Check that shopping Cart is empty when Bundle dynamic product added by SKU from Widget to an Order"
- filename: "AddProductOutOfStockToCartOrderBySkuWidgetTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddProductOutOfStockToCartOrderBySkuWidgetTest"
      title: "Check that shopping Cart is empty when Simple product Out Of Stock added by SKU from Widget to an Order"
      description: "Check that shopping Cart is empty when Simple product Out Of Stock added by SKU from Widget to an Order"
- filename: "DeleteProductWithNonexistentSkuFromCartBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "DeleteProductWithNonexistentSkuFromCartBySkuFromCustomerAccountTest"
      title: "Delete product with nonexistent sku from cart by sku from customer account test"
      description: "Delete product with nonexistent sku from cart by sku from customer account"
- filename: "AddSimpleProductWithQtyMoreThanAvailableBySkuFromCustomerAccountTest.xml"
  module: "AdvancedCheckout"
  tests:
    - testname: "AddSimpleProductWithQtyMoreThanAvailableBySkuFromCustomerAccountTest"
      title: "Add simple product with qty more than available by sku from customer account test"
      description: "Add simple product with qty more than available by sku from customer account"
- filename: "AdminCheckProductShortDescriptionOnMultipleUpdateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCheckProductShortDescriptionOnMultipleUpdateTest"
      title: "Product short description should be correct in multiple schedule updates with wysiwyg enabled"
      description: "Product short description in wysiwyg iframe should be correct"
- filename: "NewProductsListWidgetSimpleProductTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "NewProductsListWidgetSimpleProductTest"
      title: ""
      description: ""
- filename: "AdminScheduledDateInPastProductTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminScheduledDateInPastProductTest"
      title: "Create product update campaign with start date in the past and get error message"
      description: "Create product update campaign with start date in the past and get error message"
- filename: "AdminCreateCategoryWithProductsGridFilterTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCreateCategoryWithProductsGridFilterTest"
      title: ""
      description: ""
- filename: "AdminCreateScheduledTemporaryUpdateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCreateScheduledTemporaryUpdateTest"
      title: "Admin should be able to create temporary product update campaign and verify it in grid"
      description: "Admin should be able to create temporary product update campaign and verify it in grid"
- filename: "StorefrontSpecialPriceCanBeStagedTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "StorefrontSpecialPriceCanBeStagedTest"
      title: "Special Price can be staged"
      description: "Special price is applied to product by Schedule Update"
- filename: "AdminCheckProductUpdateFormTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCheckProductUpdateFormTest"
      title: "Check the fields in the product staging update modal form"
      description: "Check the fields in the product staging update modal form"
- filename: "CreateProductUpdateAndValidateUpdateInCustomWebsiteTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "CreateProductUpdateAndValidateUpdateInCustomWebsiteTest"
      title: "Create product update and validate update in custom website test"
      description: "Create product update and validate update in custom website test"
- filename: "AdminVirtualProductUpdateTestNoEndDateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminVirtualProductUpdateTestNoEndDateTest"
      title: "Admin should be able to create Single Future Update with no end date from Virtual Product Page"
      description: "Admin should be able to create Single Future Update with no end date from Virtual Product Page"
- filename: "AdminVirtualProductUpdateTestEndDateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminVirtualProductUpdateTestEndDateTest"
      title: "Admin should be able to create Single Future Update with end date from Virtual Product Page"
      description: "Admin should be able to create Single Future Update with end date from Virtual Product Page"
- filename: "AdminCreateScheduledTemporaryUpdateProductOptionsTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCreateScheduledTemporaryUpdateProductOptionsTest"
      title: "Create scheduled update for product with custom options and verify it is saved successfully"
      description: "Admin should be able to create scheduled update for product with custom options and verify it is saved successfully"
- filename: "AdminDeleteUsedCategoryUpdateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminDeleteStagingUpdateForCategoryInUseTest"
      title: "Delete category update when the category is used"
      description: "Admin should be able to delete category update when the category is used"
- filename: "AdminUpdateCategoryWithProductsTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminUpdateCategoryWithProductsTest"
      title: ""
      description: ""
- filename: "AdminDisplaySpecialCharsInProductNameTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminDisplaySpecialCharsInProductNameTest"
      title: "Displayig special characters in Product name"
      description: "Displayig special characters in Product name"
- filename: "ScheduleUpdateForTierPriceSetAsDiscountTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "ScheduleUpdateForTierPriceSetAsDiscountTest"
      title: "Scheduling an update for the Tier price set as a discount on the original price"
      description: "Scheduling an update for the Tier price set as a discount on the original price"
- filename: "AdminDeleteProductStagingUpdateWhenTheProductIsUsedTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminDeleteProductStagingUpdateWhenTheProductIsUsedTest"
      title: "Delete Product Staging Update when the Product is used"
      description: "Verifies that after deleting a product update, other entities that use the product are not affected"
- filename: "AdminCreateCategoryWithAnchorFieldTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCreateCategoryWithAnchorFieldTest"
      title: ""
      description: ""
- filename: "AdminScheduledEndDateBeforeStartDateProductTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminScheduledEndDateBeforeStartDateProductTest"
      title: "Create product update campaign with end date before start date and get error message"
      description: "Create product update campaign with end date before start date and get error message"
- filename: "AdminSaveAsNewPermanentUpdateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminSaveAsNewPermanentUpdateTest"
      title: "Create permanent product update campaign, remove it and save as new update"
      description: "Admin should be able to create permanent product update campaign, remove it and save as new update"
- filename: "AdminMoveCategoryFromParentAnchoredCategoryTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminMoveCategoryFromParentAnchoredCategoryTest"
      title: ""
      description: ""
- filename: "AdminMoveAnchoredCategoryToDefaultCategoryTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminMoveAnchoredCategoryToDefaultCategoryTest"
      title: ""
      description: ""
- filename: "AdminCheckProductUpdateFormPriceScopeWebsiteTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCheckProductUpdateFormPriceScopeWebsiteTest"
      title: "Check the fields in the product staging update modal form when price scope = Website"
      description: "Check the fields in the product staging update modal form when price scope = Website"
- filename: "AdminSaveAsNewTemporaryUpdateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminSaveAsNewTemporaryUpdateTest"
      title: "Create temporary product update campaign, remove it and save as new update"
      description: "Admin should be able to create temporary product update campaign, remove it and save as new update"
- filename: "AdminCreateScheduledPermanentUpdateProductTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCreateScheduledPermanentUpdateProductTest"
      title: "Admin should be able to create permanent product update campaign and verify it in grid"
      description: "Admin should be able to create permanent product update campaign and verify it in grid"
- filename: "AdminSimpleProductUpdateTestEndDateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminSimpleProductUpdateTestEndDateTest"
      title: "Admin should be able to create Single Future Update with end date from Simple Product Page"
      description: "Admin should be able to create Single Future Update with end date from Simple Product Page"
- filename: "AdminSimpleProductUpdateTestNoEndDateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminSimpleProductUpdateTestNoEndDateTest"
      title: "Admin should be able to create Single Future Update with no end date from Simple Product Page"
      description: "Admin should be able to create Single Future Update with no end date from Simple Product Page"
- filename: "CreateProductUpdateAndValidateUpdateInDefaultWebsiteTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "CreateProductUpdateAndValidateUpdateInDefaultWebsiteTest"
      title: "Create product update and validate update in default website test"
      description: "Create product update and validate update in default website test"
- filename: "NewProductsListWidgetVirtualProductTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "NewProductsListWidgetVirtualProductTest"
      title: ""
      description: ""
- filename: "AdminCheckPaginationInStorefrontTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCheckPaginationInStorefrontTest"
      title: ""
      description: ""
- filename: "AdminCreateTwoProductUpdateSameDateRangeTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCreateTwoProductUpdateSameDateRangeTest"
      title: "Create scheduled product updates"
      description: "Create 2 product update campaigns with the same date range and get error message"
- filename: "AdminCreatePermanentUpdateProductAndCheckActivationTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCreatePermanentUpdateProductAndCheckActivationTest"
      title: "Admin should be able to create permanent product update campaign, verify it in grid and check activation"
      description: "Admin should be able to create permanent product update campaign and verify it in grid"
- filename: "AdminCreateTemporaryUpdateProductTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminCreateTemporaryUpdateProductTest"
      title: "Admin should be able to create temporary product update and verify it in grid after activation"
      description: "Admin should be able to create temporary product update and verify it in grid after activation"
- filename: "AdminValidateProductSpecialPriceAfterUpdateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminValidateProductSpecialPriceAfterUpdateTest"
      title: "Validate product special price after update"
      description: "Check product special price after schedule update is active"
- filename: "AdminUpdateFlatCategoryAndAddProductsTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminUpdateFlatCategoryAndAddProductsTest"
      title: ""
      description: ""
- filename: "StoreFrontProductSpecialPriceSetByScheduledUpdateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "StoreFrontProductSpecialPriceSetByScheduledUpdateTest"
      title: "Check that Special price set by scheduled updated for selected product"
      description: "Check that Special price set by scheduled updated for selected product"
- filename: "CheckProductsAfterUpdateDeleteStagingTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "CheckProductsAfterUpdateDeleteStagingTest"
      title: "Check products after update delete staging test"
      description: "Check products after update delete staging"
- filename: "AdminShareStagingUpdateTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminShareStagingUpdateTest"
      title: "Admin should be able to share a staging update"
      description: "Admin should be able to share a staging update"
- filename: "AdminReSavingProductAfterInitialSaveFailsTest.xml"
  module: "CatalogStaging"
  tests:
    - testname: "AdminReSavingProductAfterInitialSaveFailsTest"
      title: "Save product update after failed attempt"
      description: "Verify if product is saved successfully after initial save fails"
- filename: "StorefrontApplyCategoryPermissionsToSecondWebsiteTest.xml"
  module: "CatalogPermissions"
  tests:
    - testname: "StorefrontApplyCategoryPermissionsToSecondWebsiteTest"
      title: "Apply Category Permissions to Website 2"
      description: "This test verifies that if one category has different permissions for different Website they will be applied correctly"
- filename: "AdminManageCategoriesByUserWithPermissionFor1StoreTest.xml"
  module: "AdminGws"
  tests:
    - testname: "AdminManageCategoriesByUserWithPermissionFor1StoreTest"
      title: "Ability to manage categories by admin user with permission for 1 store"
      description: "Ability to manage categories by admin user with permission for 1 store"
- filename: "AdminCreateUserTest.xml"
  module: "AdminGws"
  tests:
    - testname: "AdminCreateUserWithNewAdminRoleTest"
      title: "Create a user in admin"
      description: "Create a user in admin"
- filename: "RestrictedAdminCatalogMassActionPermissionTest.xml"
  module: "AdminGws"
  tests:
    - testname: "RestrictedAdminCatalogMassActionPermissionTest"
      title: "Catalog Mass action for users with limited permission"
      description: "Restricted admin user with access to Products should not have access for Mass action"
- filename: "RestrictedAdminCatalogOpenUpdateAttributesTest.xml"
  module: "AdminGws"
  tests:
    - testname: "RestrictedAdminCatalogOpenUpdateAttributesTest"
      title: "Open catalog update attributes for users with limited permission"
      description: "Restricted admin user with access to Products should have access for Update Attributes but only for those stores to which he has access"
- filename: "AdminReviewOrderWithOnlyReportsPermissionTest.xml"
  module: "AdminGws"
  tests:
    - testname: "AdminReviewOrderWithOnlyReportsPermissionTest"
      title: "User should be able to review ordered products with only 'Reports' permission"
      description: "User should be able to review ordered products with only 'Reports' permission"
- filename: "AdminWithAccessToOneWebsiteCanCreateProductAndAssignOnlyForThisWebsiteTest.xml"
  module: "AdminGws"
  tests:
    - testname: "AdminWithAccessToOneWebsiteCanCreateProductAndAssignOnlyForThisWebsiteTest"
      title: "[2.3] Admin with access to one website can create product and assign only for this website"
      description: "As admin with role access only to one website, I can assign new product only for this website"
- filename: "AdminCreateUserRoleTest.xml"
  module: "AdminGws"
  tests:
    - testname: "AdminCreateUserRoleTest"
      title: "Create a user role in admin"
      description: "Create a user role in admin"
- filename: "RestrictedUserRoleProductAttributeTest.xml"
  module: "AdminGws"
  tests:
    - testname: "RestrictedUserRoleProductAttributeTest"
      title: "Admin with restricted access to Product attributes should not be able to add an attribute"
      description: "Admin with restricted attribute access should not be able to add attribute from Product Edit Page "
- filename: "IndexManagementLogsInAdminPanelTest.xml"
  module: "AdminGws"
  tests:
    - testname: "IndexManagementLogsInAdminPanelTest"
      title: "Index Management action logs in Admin panel"
      description: "Index Management action logs in Admin panel"
- filename: "AdminConfigurationPermissionTest.xml"
  module: "AdminGws"
  tests:
    - testname: "AdminConfigurationPermissionTest"
      title: "Admin configuration permission"
      description: "Admin configuration permission"
- filename: "AdminUserWithPermissionOneWebsiteCannotViewAllStoreViewsScopeTest.xml"
  module: "AdminGws"
  tests:
    - testname: "AdminUserWithPermissionOneWebsiteCannotViewAllStoreViewsScopeTest"
      title: "[2.3] Admin user with permission for 1 website cannot view All Store Views scope on a product assigned to different websites"
      description: "As an Admin user, When I am an administrator of a single web-site and I edit a product which is assigned to several other web-sites,             then 'All Store Views' scope option is not available for me and product edit page is opened for the store view scope which I have access to."
- filename: "RestrictedUserRoleForProductRemovalTest.xml"
  module: "AdminGws"
  tests:
    - testname: "RestrictedUserRoleForProductRemovalTest"
      title: "Restricted admin user should not be able to remove product from other websites"
      description: "Restricted admin not able to remove products from websites other than access provided by the user role"
- filename: "NewProductsListWidgetConfigurableProductTest.xml"
  module: "ConfigurableProductStaging"
  tests:
    - testname: "NewProductsListWidgetConfigurableProductTest"
      title: ""
      description: ""
- filename: "AdminConfigurableProductUpdateTestNoEndDateTest.xml"
  module: "ConfigurableProductStaging"
  tests:
    - testname: "AdminConfigurableProductUpdateTestNoEndDateTest"
      title: "Admin should be able to create Single Future Update with no end date from Configurable Product Page"
      description: "Admin should be able to create Single Future Update with no end date from Configurable Product Page"
- filename: "AdminConfigurableProductUpdateTestEndDateTest.xml"
  module: "ConfigurableProductStaging"
  tests:
    - testname: "AdminConfigurableProductUpdateTestEndDateTest"
      title: "Admin should be able to create Single Future Update with end date from Configurable Product Page"
      description: "Admin should be able to create Single Future Update with end date from Configurable Product Page"
- filename: "OnePageCheckoutAsUKGuestWithVirtualProductUsingGiftCardAccountTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "OnePageCheckoutAsUKGuestWithVirtualProductUsingGiftCardAccountTest"
      title: "OnePageCheckout as UK guest with virtual product using gift card account test"
      description: "Checkout as UK guest with virtual product using gift card account"
- filename: "CheckoutTotalsSortOrderInCartTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "CheckoutTotalsSortOrderInCartTest"
      title: "Checkout Totals Sort Order configuration and displaying in cart"
      description: "Checkout Totals Sort Order configuration and displaying in cart"
- filename: "AdminCancelGuestOrderUsingGiftCardTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "AdminCancelGuestOrderUsingGiftCardTest"
      title: "Cancel guest order placed using gift card"
      description: "A guest customer places an order using a gift card. Order is cancelled by admin. Amount is refunded to gift card"
- filename: "StorefrontUnapplyGiftCardFromCartTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "StorefrontUnapplyGiftCardFromCartTest"
      title: "Unapply gift card from cart"
      description: "Apply gift card to cart and unapply"
- filename: "OnePageCheckoutUsingGiftCardAndCouponForAllCustomerGroupsTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "OnePageCheckoutUsingGiftCardAndCouponForAllCustomerGroupsTest"
      title: "OnePageCheckout using gift card and coupon for all customer groups test"
      description: "Checkout using gift card and coupon for all customer groups"
- filename: "AdminMarketingGiftCardAccountsNavigateMenuTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "AdminMarketingGiftCardAccountsNavigateMenuTest"
      title: "Admin marketing gift card accounts navigate menu test"
      description: "Admin should be able to navigate to Marketing &gt; Gift Card Accounts"
- filename: "CheckGiftCardAccountLifetimeDatesTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "CheckGiftCardAccountLifetimeDatesTest"
      title: "Check that Lifetime dates are correct in a 'Gift Card Accounts' page"
      description: "Check that Lifetime dates are correct in a 'Gift Card Accounts' page"
- filename: "StorefrontApplyGiftCardDuringCheckoutForPhysicalProductTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "StorefrontApplyGiftCardDuringCheckoutForPhysicalProductTest"
      title: "Apply Gift Card during Checkout for physical product that not covers full amount"
      description: "Apply Gift Card during Checkout for physical product that not covers full amount"
- filename: "StorefrontApplyGiftCardDuringCheckoutForVirtualProductTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "StorefrontApplyGiftCardDuringCheckoutForVirtualProductTest"
      title: "Apply Gift Card during Checkout for virtual product that covered NOT all amount"
      description: "Apply Gift Card during Checkout for virtual product that covered NOT all amount"
- filename: "StorefrontApplyGiftCardDuringCheckoutTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "StorefrontApplyGiftCardDuringCheckoutTest"
      title: "Apply Gift Card during Checkout that covered all amount."
      description: "Apply Gift Card during Checkout that covered all amount."
- filename: "AdminCreditMemoOrderPaidWithGiftCardTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "AdminCreditMemoOrderPaidWithGiftCardTest"
      title: "Creditmemo an order paid in full with gift card"
      description: "A guest customer places an order using a gift card that covers full order. Order is invoiced and credit memo created by admin. Order status is Closed"
- filename: "StoreFrontPlaceAnOrderWithRedeemedGiftCardTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "StoreFrontPlaceAnOrderWithRedeemedGiftCardTest"
      title: "Place an order after redeeming gift card"
      description: "A customer should be able redeem gift card and place an order"
- filename: "OnePageCheckoutAsRegisteredUSCustomerUsingStoreCreditAndGiftCardTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "OnePageCheckoutAsRegisteredUSCustomerUsingStoreCreditAndGiftCardTest"
      title: "OnePageCheckout as a registered US customer using store credit and gift card test"
      description: "Checkout as a registered US customer using store credit and gift card"
- filename: "OnePageCheckoutAsUKGuestWithVirtualProductUsingCouponForNotLoggedInCustomersAndGiftCardTest.xml"
  module: "GiftCardAccount"
  tests:
    - testname: "OnePageCheckoutAsUKGuestWithVirtualProductUsingCouponForNotLoggedInCustomersAndGiftCardTest"
      title: "OnePageCheckout as UK guest with virtual product using coupon and gift card for not logged in customers test"
      description: "Checkout as UK guest with virtual product using coupon and gift card for not logged in customers"
- filename: "AdminValidateCustomersByNumberOfOrdersTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminValidateCustomersByNumberOfOrdersTest"
      title: "Finding customers in Customer Segments based on total Number of Orders = 0"
      description: "Verify that there is matched customer in Customer Segments based on total Number of Orders = 0"
- filename: "AdminCustomersReportsSegmentsNavigateMenuTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCustomersReportsSegmentsNavigateMenuTest"
      title: "Admin customers reports segments navigate menu test"
      description: "Admin should be able to navigate to Reports &gt; Segments"
- filename: "AdminCreateCustomerSegmentNewsletterSubscriptionTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentNewsletterSubscriptionTest"
      title: "Create customer segment with condition based on 'Newsletter Subscription' and customer is subscribed to newsletter"
      description: "Admin should be able to create customer segment with condition based on 'Newsletter Subscription' and customer is subscribed to newsletter"
- filename: "AdminCreateCustomerSegmentBySpecificGroupTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentBySpecificGroupTest"
      title: "Create customer segment with condition based on 'Specific Group'"
      description: "Admin should be able to create customer segment with condition based on 'Specific Group'"
- filename: "AdminCreateCustomerSegmentConditionCombinationTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentConditionCombinationTest"
      title: "Verify customer segment with several conditions combination"
      description: "Admin should be able to create customer segment with several conditions combination"
- filename: "AdminCreateCustomerSegmentByGenderTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentByGenderTest"
      title: "Create customer segment with condition based on 'Gender'"
      description: "Admin should be able to create customer segment with condition based on 'Gender'"
- filename: "AdminCreateCustomerSegmentWithOneAddressConditionTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentWithOneAddressConditionTest"
      title: "Create customer segment with one customer address condition"
      description: "Admin should be able to create customer segment with one customer address condition"
- filename: "AdminCreateCustomerSegmentByDateOfBirthTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentByDateOfBirthTest"
      title: "Create customer segment with condition based on 'Date of Birth'"
      description: "Admin should be able to create customer segment with condition based on 'Date of Birth'"
- filename: "AdminCreateCustomerSegmentByFirstNameTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentByFirstNameTest"
      title: "Create customer segment with condition based on 'First Name'"
      description: "Admin should be able to create customer segment with condition based on 'First Name'"
- filename: "AdminCreateCustomerSegmentWithSeveralWebsitesTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentWithSeveralWebsitesTest"
      title: "Create two customers in different websites and create customer segment with condition based on 'Newsletter Subscription'"
      description: "Admin should be able to create customer segment with condition based on 'Newsletter Subscription'"
- filename: "AdminCreateCustomerSegmentByLastNameTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentByLastNameTest"
      title: "Create customer segment with condition based on 'Last Name'"
      description: "Admin should be able to create customer segment with condition based on 'Last Name'"
- filename: "AdminCreateCustomerSegmentByGroupRetailerTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentByGroupRetailerTest"
      title: "Use Customer Segmentation to Apply Shopping Cart Promotion"
      description: "Use Customer Segmentation to Apply Shopping Cart Promotion"
- filename: "AdminCreateCustomerInactiveSegmentWithAddressConditionsTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerInactiveSegmentWithAddressConditionsTest"
      title: "Create customer inactive segment entity with customer address conditions"
      description: "Admin should be able to create customer inactive segment with customer address conditions"
- filename: "AdminCreateCustomerSegmentStoreCreditTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentStoreCreditTest"
      title: "Create customer segment with condition based on 'Store Credit'"
      description: "Admin should be able to create customer segment with condition based on 'Store Credit'"
- filename: "AdminCreateCustomerSegmentEntityWithCustomerConditionsTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentEntityWithCustomerConditionsTest"
      title: "Create Customer Segment"
      description: "Admin should be able to create customer segment"
- filename: "AdminCreateCustomerSegmentByGroupTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentByGroupTest"
      title: "Create customer segment with condition based on 'Group'"
      description: "Admin should be able to create customer segment with condition based on 'Group'"
- filename: "AdminCreateCustomerSegmentWithConditionsCustomAttributeTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentWithConditionsCustomAttributeTest"
      title: "Create customer segment entity with customer conditions custom attribute"
      description: "Admin should be able to create customer segment entity with customer conditions custom attribute"
- filename: "AdminCreateCustomerSegmentNotSubscribedNewsletterTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentNotSubscribedNewsletterTest"
      title: "Create customer segment with condition based on 'Newsletter Subscription' and customer is not subscribed to newsletter"
      description: "Admin should be able to create customer segment with condition based on 'Newsletter Subscription' and customer is not subscribed to newsletter"
- filename: "AdminCustomerSegmentsNavigateMenuTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCustomersSegmentsNavigateMenuTest"
      title: "Admin customers segments navigate menu test"
      description: "Admin should be able to navigate to Customers &gt; Segments"
- filename: "AdminCreateCustomerSegmentWithMultipleAddressConditionsTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminCreateCustomerSegmentWithMultipleAddressConditionsTest"
      title: "Create customer segment entity with multiple customer address conditions."
      description: "Admin should be able to create customer segment with customer address conditions"
- filename: "AdminFindCustomerByNumberOfOrdersTest.xml"
  module: "CustomerSegment"
  tests:
    - testname: "AdminFindCustomerByNumberOfOrdersTest"
      title: "Finding customers in Customer Segments based on Number of Orders = 0"
      description: "Verify that there is matched customer in Customer Segments based on Number of Orders = 0"
- filename: "ProdBelongsToCategoriesWithAndWithoutEventShowTest.xml"
  module: "CatalogEvent"
  tests:
    - testname: "ProdBelongsToCategoriesWithAndWithoutEventShowTest"
      title: "Products tied to categories with or without events determine product availability"
      description: "Product belonging to categories with no event can be purchased. Products belonging to categories with future or expired events cannot be purchased unless also added to categories with no event."
- filename: "AdminMarketingEventsNavigateMenuTest.xml"
  module: "CatalogEvent"
  tests:
    - testname: "AdminMarketingEventsNavigateMenuTest"
      title: "Admin marketing events navigate menu test"
      description: "Admin should be able to navigate to Marketing &gt; Events"
- filename: "AdminSalesReturnsNavigateMenuTest.xml"
  module: "Rma"
  tests:
    - testname: "AdminSalesReturnsNavigateMenuTest"
      title: "Admin sales returns navigate menu test"
      description: "Admin should be able to navigate to Sales &gt; Returns"
- filename: "CheckNewReturnWithCustomAttributeTest.xml"
  module: "Rma"
  tests:
    - testname: "CheckNewReturnWithCustomAttributeTest"
      title: "Checking 'Create New Return' layout when add not required dropdown attribute"
      description: "Checking 'Create New Return' layout when add not required dropdown attribute"
- filename: "AdminCheckInputFieldsDisabledAfterAppConfigDumpTest.xml"
  module: "Rma"
  tests:
    - testname: "AdminCheckInputFieldsDisabledAfterAppConfigDumpTest"
      title: ""
      description: ""
- filename: "CheckingRMAPrintTest.xml"
  module: "Rma"
  tests:
    - testname: "CheckingRMAPrintTest"
      title: "Checking Returns Print"
      description: "RMA file should be downloaded"
- filename: "AdminRMACheckTheTrackingNumberConfirmationPopupTest.xml"
  module: "Rma"
  tests:
    - testname: "AdminRMACheckTheTrackingNumberConfirmationPopupTest"
      title: "Admin confirmation modal for RMA tracking number should be in Magento style"
      description: "Testing the confirmation modal for removing the tracking number"
- filename: "CheckCustomerReturnPageTest.xml"
  module: "Rma"
  tests:
    - testname: "CheckCustomerReturnPageTest"
      title: "Check Customer Return page on Backend"
      description: "Checking 'remaining quantity' value after return 'RMA'"
- filename: "AdminReturnProductsUsingReturnMerchandiseAuthorizationTest.xml"
  module: "Rma"
  tests:
    - testname: "AdminReturnProductsUsingReturnMerchandiseAuthorizationTest"
      title: "Return Products Using Return Merchandise Authorization"
      description: "Return Products Using Return Merchandise Authorization"
- filename: "CheckingReturnReasonReturnItemsGridTest.xml"
  module: "Rma"
  tests:
    - testname: "CheckingReturnReasonReturnItemsGridTest"
      title: "Checking Return reason in Return Items grid"
      description: "RMA return reason is clipped in the Sales &gt; Returns &gt; Return Items grid - It looks like a link but does nothing"
- filename: "AddYesNoReturnAttributeToTheDefaultEAVFormTest.xml"
  module: "Rma"
  tests:
    - testname: "AddYesNoReturnAttributeToTheDefaultEAVFormTest"
      title: "[RMA] Add Yes/No return attribute to the Default EAV Form"
      description: "[RMA] Add Yes/No return attribute to the Default EAV Form"
- filename: "RequiredRMAAttributesValidationWhileCustomerSubmitsReturnTest.xml"
  module: "Rma"
  tests:
    - testname: "RequiredRMAAttributesValidationWhileCustomerSubmitsReturnTest"
      title: "Required RMA Attributes Validation While Customer Submits A Return"
      description: "Required RMA Attributes Validation While Customer Submits A Return"
- filename: "EndToEndB2CAdminTest.xml"
  module: "Rma"
  tests:
    - testname: "EndToEndB2CAdminTest"
      title: ""
      description: ""
- filename: "AdminConcurrentRMAsTest.xml"
  module: "Rma"
  tests:
    - testname: "AdminConcurrentRMAsTest"
      title: "Concurrent RMAs"
      description: "Verify that RMAs can be created simultaneously so that none of them deletes info from another one"
- filename: "CheckRemainingQuantityTest.xml"
  module: "Rma"
  tests:
    - testname: "CheckRemainingQuantityTest"
      title: "Checking 'remaining quantity' value after return 'RMA'"
      description: "Checking 'remaining quantity' value after return 'RMA'"
- filename: "AdminStoresReturnsNavigateMenuTest.xml"
  module: "Rma"
  tests:
    - testname: "AdminStoresReturnsNavigateMenuTest"
      title: "Admin stores returns navigate menu test"
      description: "Admin should be able to navigate to Stores &gt; Returns"
- filename: "MoveProductsByPositionFieldInMiddleOfSamePageGridModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldInMiddleOfSamePageGridModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move in the middle within same page"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move in the middle within same page"
- filename: "MerchantShouldBeAbleToDefineCategoryByMatchingOnPriceTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MerchantShouldBeAbleToDefineCategoryByMatchingOnPriceTest"
      title: "Merchant should be able to define category by matching on price"
      description: "Merchant should be able to define category by matching on price"
- filename: "AdminAssignProductsToCategoryBySearchTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminAssignProductsToCategoryBySearchTest"
      title: "[Visual Merchandiser] Admin should be able to assign products to category by search"
      description: "[Visual Merchandiser] Admin should be able to assign products to category by search"
- filename: "AddProductToCategoryByAttributeContainsConditionTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AddProductToCategoryByAttributeContainsConditionTest"
      title: "Products assigned by rule: 'contains' condition should use fuzzy match"
      description: "Using Visual Merchandiser; When matching products by condition, the 'contains' condition should act like fuzzy match."
- filename: "AdminVerifyAddProductToCategoryWithoutErrorTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminVerifyAddProductToCategoryWithoutErrorTest"
      title: "Admin should be able to add product to the category without error"
      description: "Admin should be able to add product to the category without error"
- filename: "MoveProductsByPositionFieldInMiddleOfDifferentPageTileModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldInMiddleOfDifferentPageTileModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move in the middle across different pages"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move in the middle across different pages"
- filename: "AdminCheckTierPriceConditionOnCategoryPageTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminCheckTierPriceConditionOnCategoryPageTest"
      title: "Tier price conditions on category page with Fixed Price"
      description: "Tier price conditions on category page with Fixed Price"
- filename: "AdminNewProductsAssignmentToCategoryWithInvalidDataTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminNewProductsAssignmentToCategoryWithInvalidDataTest"
      title: "New products assignment to Category with invalid data after validation"
      description: "New products assignment to Category with invalid data after validation"
- filename: "AdminChangeProductPositionInCategoryTileModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminChangeProductPositionInCategoryTileModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in category for tile view"
      description: "Admin should be able to move assigned product position in category for tile view"
- filename: "MoveProductsByPositionFieldToLastSamePageGridModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldToLastSamePageGridModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move to last within same page"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move to last within same page"
- filename: "MoveProductsByPositionFieldInMiddleOfDifferentPageGridModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldInMiddleOfDifferentPageGridModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move in the middle across different pages"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move in the middle across different pages"
- filename: "MoveProductsByPositionFieldToLastSamePageTileModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldToLastSamePageTileModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move to last within same page"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move to last within same page"
- filename: "AdminSortCategoryProductByStockTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminSortCategoryProductByStockTest"
      title: "Stock Quantity calculation for configurable products"
      description: "Verify category products sorted for configurable products based on stock quantity"
- filename: "AdminCreateCategoryWithNoAnchorFieldTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminCreateCategoryWithNoAnchorFieldTest"
      title: ""
      description: ""
- filename: "MoveProductsByPositionFieldToFirstDifferentPageGridModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldToFirstDifferentPageGridModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move to 1st across different pages"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move to 1st across different pages"
- filename: "AssignProductsToCategoryMatchByRulePriceQuantityTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AssignProductsToCategoryMatchByRulePriceQuantityTest"
      title: "[Visual Merchandiser] Admin should be able to assign products using match by products rule - price and quantity"
      description: "[Visual Merchandiser] Admin should be able to assign products using match by products rule - price and quantity"
- filename: "AssignProductsToCategoryMatchByRuleNameContainsTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AssignProductsToCategoryMatchByRuleNameContainsTest"
      title: "[Visual Merchandiser] Admin should be able to assign products using match by products rule - product name contains"
      description: "[Visual Merchandiser] Admin should be able to assign products using match by products rule - product name contains"
- filename: "AssignProductsToCategoryMatchByRuleCloneCategoryIDTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AssignProductsToCategoryMatchByRuleCloneCategoryIDTest"
      title: "[Visual Merchandiser] Admin should be able to assign products using match by products rule - clone category IDs"
      description: "[Visual Merchandiser] Admin should be able to assign products using match by products rule - clone category IDs"
- filename: "AssignProductsToCategoryMatchByRuleSkuEqualTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AssignProductsToCategoryMatchByRuleSkuEqualTest"
      title: "[Visual Merchandiser] Admin should be able to assign products using match by products rule - sku equal"
      description: "[Visual Merchandiser] Admin should be able to assign products using match by products rule - sku equal"
- filename: "MoveProductsByPositionFieldToFirstSamePageGridModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldToFirstSamePageGridModeTest"
      title: "Admin should be able to move assigned product position in the category by editing Position field in grid mode - move to 1st within same page"
      description: "Admin should be able to move assigned product position in the category by editing Position field in grid mode - move to 1st within same page"
- filename: "EndToEndB2CAdminTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "EndToEndB2CAdminTest"
      title: ""
      description: ""
- filename: "UnassignProductsFromCategoryBySearchTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "UnassignProductsFromCategoryBySearchTest"
      title: "[Visual Merchandiser] Admin should be able to unassign products from category by search"
      description: "[Visual Merchandiser] Admin should be able to unassign products from category by search"
- filename: "AdminExportImportProductsDoesNotResetVisualMerchandiserSettingsTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminExportImportProductsDoesNotResetVisualMerchandiserSettingsTest"
      title: "Export - Import of products does not reset Visual Merchandiser settings."
      description: "Export - Import of products does not reset Visual Merchandiser settings. After reimporting products VM settings aren't lost."
- filename: "StorefrontAssignProductsToCategoryBySKUsTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "StorefrontAssignProductsToCategoryBySKUsTest"
      title: "Admin should be able to assign products to category by SKU"
      description: "Admin should be able to mass assign products to category by SKU"
- filename: "UnassignProductsFromCategoryBySKUsTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "UnassignProductsFromCategoryBySKUsTest"
      title: "[Visual Merchandiser] Admin should be able to remove products to category by SKU"
      description: "[Visual Merchandiser] Admin should be able to mass remove products to category by SKU"
- filename: "StorefrontProductsSortingByPositionWorkWithElasticsearchTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "StorefrontProductsSortingByPositionWorkWithElasticsearchTest"
      title: "Products sorting by position work with Elasticsearch"
      description: "Products sorting by position work with Elasticsearch"
- filename: "MoveProductsByPositionFieldInMiddleOfSamePageTileModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldInMiddleOfSamePageTileModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move in the middle within same page"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move in the middle within same page"
- filename: "AdminUnassignProductsFromCategoryGridModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminUnassignProductsFromCategoryGridModeTest"
      title: "Admin should be able to unassign products from category by clicking unassign link"
      description: "Admin should be able to unassign products from category by clicking unassign link"
- filename: "MoveProductsByPositionFieldInTileModeInvalidValuesTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldInTileModeInvalidValuesTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - invalid values"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - invalid values"
- filename: "AdminAddProductToCategorySortByPriceTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminAddProductToCategorySortByPriceTest"
      title: "Products in category should remain in order after adding new products."
      description: "Using Visual Merchandiser; admin sorts products, adds new products and verifies that order remains correct."
- filename: "MoveProductsByPositionFieldInGridModeInvalidValuesTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldInGridModeInvalidValuesTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - invalid values"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - invalid values"
- filename: "MoveProductsByPositionFieldToLastDifferentPageGridModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldToLastDifferentPageGridModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move to last across different pages"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in grid mode - move to last across different pages"
- filename: "MoveProductsByPositionFieldToLastDifferentPageTileModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldToLastDifferentPageTileModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move to last across different pages"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move to last across different pages"
- filename: "AdminChangeProductPositionInCategoryGridModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminChangeProductPositionInCategoryGridModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in category for grid view"
      description: "Admin should be able to move assigned product position in category for grid view"
- filename: "AdminAutomaticallySortSmartCategoryByNameTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminAutomaticallySortSmartCategoryByNameTest"
      title: "Merchant should be able to automatically sort smart category by name"
      description: "Merchant should be able to automatically sort smart category by name"
- filename: "MoveProductsByPositionFieldToFirstDifferentPageTileModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldToFirstDifferentPageTileModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move to 1st across different pages"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move to 1st across different pages"
- filename: "AdminAutomaticallySortSmartCategoryByPriceTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "AdminAutomaticallySortSmartCategoryByPriceTest"
      title: "Merchant should be able to automatically sort smart category by price"
      description: "Merchant should be able to automatically sort smart category by price"
- filename: "MoveProductsByPositionFieldToFirstSamePageTileModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "MoveProductsByPositionFieldToFirstSamePageTileModeTest"
      title: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move to 1st within same page"
      description: "[Visual Merchandiser] Admin should be able to move assigned product position in the category by editing Position field in tile mode - move to 1st within same page"
- filename: "CheckProductPriceInCatalogAfterSortingTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "CheckProductPriceInCatalogAfterSortingTest"
      title: "Checking configurable product price displaying in Catalog after sorting"
      description: "Check configurable product price in Catalog after sorting"
- filename: "VisualMerchandizerUiElementsTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "VisualMerchandizerUiElementsTest"
      title: "[Visual Merchandiser] UI elements checks"
      description: "[Visual Merchandiser] UI elements checks"
- filename: "UnassignProductsFromCategoryTileModeTest.xml"
  module: "VisualMerchandiser"
  tests:
    - testname: "UnassignProductsFromCategoryTileModeTest"
      title: "[Visual Merchandiser] Admin should be able to unassign products from category by clicking X button"
      description: "[Visual Merchandiser] Admin should be able to unassign products from category by clicking X button"
- filename: "AdminCreateCreditMemoStoreCreditTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "AdminCreateCreditMemoStoreCreditTest"
      title: "Create Credit Memo for Offline Payment Methods (StoreCredit)"
      description: "Assert money return to StoreCredit"
- filename: "StorefrontApplyAndRemoveStoreCreditPaymentOnCheckoutPageTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "StorefrontApplyAndRemoveStoreCreditPaymentOnCheckoutPageTest"
      title: "Option to Remove the Store Credit from the payment page of checkout"
      description: "Option to Remove the Store Credit from the payment page of checkout"
- filename: "StorefrontApplyStoreCreditDuringCheckoutForPhysicalProductTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "StorefrontApplyStoreCreditDuringCheckoutForPhysicalProductTest"
      title: "Apply Store Credit during Checkout for physical product"
      description: "Apply Store Credit during Checkout for physical product"
- filename: "OnePageCheckoutAsRegisteredUSCustomerUsingStoreCreditAndCouponForAllCustomerGroupsTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "OnePageCheckoutAsRegisteredUSCustomerUsingStoreCreditAndCouponForAllCustomerGroupsTest"
      title: "OnePageCheckout as registered US customer using store credit and coupon for all customer groups test"
      description: "Checkout as registered US customer using store credit and coupon for all customer groups"
- filename: "StorefrontApplyStoreCreditDuringCheckoutTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "StorefrontApplyStoreCreditDuringCheckoutTest"
      title: "Apply Store Credit during Checkout that covers all amount"
      description: "Apply Store Credit during Checkout that covers all amount"
- filename: "OnePageCheckoutAsRegisteredUSCustomerUsingStoreCreditTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "OnePageCheckoutAsRegisteredUSCustomerUsingStoreCreditTest"
      title: "OnePageCheckout as registered US customer using store credit test"
      description: "Checkout as registered US customer using store credit"
- filename: "AdminCreateOrderCreditMemoToStoreCreditTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "AdminCreateOrderCreditMemoToStoreCreditTest"
      title: "Admin can create credit memo to store credit."
      description: "Logged in customer places order and pays with reward points. Admin invoices and creates credit memo for order. Reward points are refunded."
- filename: "UpdateCancelPaymentMethodTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "UpdateCancelPaymentMethodTest"
      title: "Check that user can cancel/change payment method after chosen Store Credit"
      description: "Check that user can cancel/change payment method after chosen Store Credit"
- filename: "StorefrontApplyStoreCreditDuringCheckoutForVirtualProductTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "StorefrontApplyStoreCreditDuringCheckoutForVirtualProductTest"
      title: "Apply Store Credit during Checkout for Virtual Product"
      description: "Apply Store Credit during Checkout for Virtual Product"
- filename: "StorefrontVerifySecureURLRedirectCustomerBalanceTest.xml"
  module: "CustomerBalance"
  tests:
    - testname: "StorefrontVerifySecureURLRedirectCustomerBalanceTest"
      title: "Verify Secure URLs For Storefront Customer Balance Pages"
      description: "Verify that the Secure URL configuration applies to the Customer Balance pages on the Storefront"
- filename: "AdminSystemScheduledImportExportNavigateMenuTest.xml"
  module: "ScheduledImportExport"
  tests:
    - testname: "AdminSystemScheduledImportExportNavigateMenuTest"
      title: "Admin system scheduled import/export navigate menu test"
      description: "Admin should be able to navigate to System &gt; Scheduled Import/Export"
- filename: "AdminShouldBeAbleToCreateSingleFutureUpdateWithNoEndDateFromPagesPageTest.xml"
  module: "CmsStaging"
  tests:
    - testname: "AdminShouldBeAbleToCreateSingleFutureUpdateWithNoEndDateFromPagesPageTest"
      title: "Admin should be able to create Single Future Update with no end date from Pages Page"
      description: "Admin should be able to create Single Future Update with no end date from Pages Page"
- filename: "AdminRestrictedUserOnlyAccessCmsBlockTest.xml"
  module: "CmsStaging"
  tests:
    - testname: "AdminRestrictedUserOnlyAccessCmsBlockTest"
      title: "Check: restricted admin with access only to CMS Block"
      description: "Check that the system shows information only in Blocks"
- filename: "AdminShouldBeAbleToCreateSingleFutureUpdateWithNoEndDateFromCMSBlockPageTest.xml"
  module: "CmsStaging"
  tests:
    - testname: "AdminShouldBeAbleToCreateSingleFutureUpdateWithNoEndDateFromCMSBlockPageTest"
      title: "Admin should be able to create Single Future Update with no end date from CMS Block Page"
      description: "Admin should be able to create Single Future Update with no end date from CMS Block Page"
- filename: "AdminShouldBeAbleToCreateSingleFutureUpdateWithEndDateFromPagesPageTest.xml"
  module: "CmsStaging"
  tests:
    - testname: "AdminShouldBeAbleToCreateSingleFutureUpdateWithEndDateFromPagesPageTest"
      title: "Admin should be able to create Single Future Update with end date from Pages Page"
      description: "Admin should be able to create Single Future Update with end date from Pages Page"
- filename: "RestrictedAdminCreateCMSBlockTest.xml"
  module: "CmsStaging"
  tests:
    - testname: "RestrictedAdminCreateCMSBlockTest"
      title: "Create CMS Block by restricted admin"
      description: "Create CMS Block by restricted admin"
- filename: "AdminShouldBeAbleToCreateSingleFutureUpdateWithEndDateFromCMSBlockPageTest.xml"
  module: "CmsStaging"
  tests:
    - testname: "AdminShouldBeAbleToCreateSingleFutureUpdateWithEndDateFromCMSBlockPageTest"
      title: "Admin should be able to create Single Future Update with end date from CMS Block Page"
      description: "Admin should be able to create Single Future Update with end date from CMS Block Page"
- filename: "AdminShouldBeAbleToCreateSingleFutureUpdateWithNoEndDateFromGiftCardPageTest.xml"
  module: "GiftCardStaging"
  tests:
    - testname: "AdminShouldBeAbleToCreateSingleFutureUpdateWithNoEndDateFromGiftCardPageTest"
      title: "Admin should be able to create Single Future Update with no end date from Gift Card Page"
      description: "Check to ensure the future update appears on the staging dashboard"
- filename: "AdminShouldBeAbleToCreateSingleFutureUpdateWithEndDateFromGiftCardPageTest.xml"
  module: "GiftCardStaging"
  tests:
    - testname: "AdminShouldBeAbleToCreateSingleFutureUpdateWithEndDateFromGiftCardPageTest"
      title: "Admin should be able to create Single Future Update with end date from Gift Card Page"
      description: "Check to ensure the future update appears on the staging dashboard"
- filename: "SaveGiftRegistryByStoreViewTest.xml"
  module: "GiftRegistry"
  tests:
    - testname: "SaveGiftRegistryByStoreViewTest"
      title: "Gift Registry saving by Store View with Attributes"
      description: "Gift Registry saving by Store View with Attributes"
- filename: "AdminStoresGiftRegistryNavigateMenuTest.xml"
  module: "GiftRegistry"
  tests:
    - testname: "AdminStoresGiftRegistryNavigateMenuTest"
      title: "Admin stores gift registry navigate menu test"
      description: "Admin should be able to navigate to Stores &gt; Gift Registry"
- filename: "StorefrontVerifySecureURLRedirectGiftRegistryTest.xml"
  module: "GiftRegistry"
  tests:
    - testname: "StorefrontVerifySecureURLRedirectGiftRegistryTest"
      title: "Verify Secure URLs For Storefront Gift Registry Pages"
      description: "Verify that the Secure URL configuration applies to the Gift Registry pages on the Storefront"
- filename: "CheckingOfPreviewingRegistryUpdateEmailTest.xml"
  module: "GiftRegistry"
  tests:
    - testname: "CheckingOfPreviewingRegistryUpdateEmailTest"
      title: "Checking of Previewing Registry Update Email."
      description: "Preview should be loaded without errors and System should displays it "
- filename: "OnePageCheckoutAsRegisteredUSCustomerUsingRewardPointsGiftCardCouponForAllCustomerGroupsTest.xml"
  module: "Reward"
  tests:
    - testname: "OnePageCheckoutAsRegisteredUSCustomerUsingRewardPointsGiftCardCouponForAllCustomerGroupsTest"
      title: "OnePageCheckout as registered US customer using reward points gift card coupon for all customer groups test"
      description: "Checkout as registered US customer using reward points, gift card and coupon for all customer groups"
- filename: "CouponCodeRewardPointToCheckoutGuestTest.xml"
  module: "Reward"
  tests:
    - testname: "CouponCodeRewardPointToCheckoutGuestTest"
      title: "Coupon code Reward points applying to guests that create accounts after checking out"
      description: "Check Reward points from purchase using the coupon code are added to the account."
- filename: "OnePageCheckoutAsRegisteredUSCustomerUsingRewardPointsAndCouponForAllCustomerGroupsTest.xml"
  module: "Reward"
  tests:
    - testname: "OnePageCheckoutAsRegisteredUSCustomerUsingRewardPointsAndCouponForAllCustomerGroupsTest"
      title: "OnePageCheckout as a registered US customer using reward points and coupon for all customer groups test"
      description: "Checkout as a registered US customer using reward points and coupon for all customer groups"
- filename: "EmailNotificationSettingsForCustomerTest.xml"
  module: "Reward"
  tests:
    - testname: "EmailNotificationSettingsForCustomerTest"
      title: "Checking Email Notification Settings for customer"
      description: "Checking Email Notification Settings for customer"
- filename: "StorefrontVerifySecureURLRedirectRewardTest.xml"
  module: "Reward"
  tests:
    - testname: "StorefrontVerifySecureURLRedirectRewardTest"
      title: "Verify Secure URLs For Storefront Reward Customer Pages"
      description: "Verify that the Secure URL configuration applies to the Reward Customer pages on the Storefront"
- filename: "CreditMemoOrderPaidWithRewardPointsTest.xml"
  module: "Reward"
  tests:
    - testname: "CreditMemoOrderPaidWithRewardPointsTest"
      title: "Admin can create credit memo that refunds reward points."
      description: "Logged in customer places order and pays with reward points. Admin invoices and creates credit memo for order. Reward points are refunded."
- filename: "OnePageCheckoutAsRegisteredUSCustomerUsingSalesRuleWithRewardPointsTest.xml"
  module: "Reward"
  tests:
    - testname: "OnePageCheckoutAsRegisteredUSCustomerUsingSalesRuleWithRewardPointsTest"
      title: "OnePageCheckout as registered US customer using sales rule with reward points test"
      description: "Checkout as registered US customer using sales rule with reward points"
- filename: "StorefrontRewardPointsFunctionalityCanBeDisabledEnabledTest.xml"
  module: "Reward"
  tests:
    - testname: "StorefrontRewardPointsFunctionalityCanBeDisabledEnabledTest"
      title: "Reward Points functionality can be disabled/enabled on Storefront"
      description: "Reward Points functionality can be disabled/enabled on Storefront"
- filename: "CreateCreditMemoWhenCartRuleDeletedTest.xml"
  module: "Reward"
  tests:
    - testname: "CreateCreditMemoWhenCartRuleDeletedTest"
      title: "Checking creating of credit memo"
      description: "Verify Credit Memo created if the used in the order cart rule is deleted"
- filename: "ApplyRewardPointsOnCheckoutThatCoveredAllAmountTest.xml"
  module: "Reward"
  tests:
    - testname: "ApplyRewardPointsOnCheckoutThatCoveredAllAmountTest"
      title: "Apply Reward Points during Checkout that covered all amount."
      description: "Apply Reward Points during Checkout that covered all amount."
- filename: "ApplyRewardPointsOnCheckoutForVirtualProductTest.xml"
  module: "Reward"
  tests:
    - testname: "ApplyRewardPointsOnCheckoutForVirtualProductTest"
      title: "You should be able to Apply Reward Points during Checkout for virtual product."
      description: "You should be able to Apply Reward Points during Checkout for virtual product."
- filename: "ApplyRewardPointsOnCheckoutForPhysicalProductTest.xml"
  module: "Reward"
  tests:
    - testname: "ApplyRewardPointsOnCheckoutForPhysicalProductTest"
      title: "You should be able to Apply Reward Points during Checkout for simple product."
      description: "You should be able to Apply Reward Points during Checkout for simple product."
- filename: "AdminCreateTargetRuleUpSellsAndVerifyFrontendTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminCreateTargetRuleUpSellsAndVerifyFrontendTest"
      title: "Admin Create Target Rule Up Sells And Verify Frontend Test"
      description: "Test log in to Related Product Rules and Create Target Rule Up-Sells Test"
- filename: "AdminMarketingRelatedProductsRulesNavigateMenuTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminMarketingRelatedProductsRulesNavigateMenuTest"
      title: "Admin marketing related products rules navigate menu test"
      description: "Admin should be able to navigate to Marketing &gt; Related Products Rules"
- filename: "AdminCreateTargetRuleRelatedProductsWithAttributeConditionsAndVerifyFrontendTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminCreateTargetRuleRelatedProductsWithAttributeConditionsAndVerifyFrontendTest"
      title: "Admin Create Target Rule Related Products With Attribute Conditions And Verify Frontend Test"
      description: "Test log in to Related Product Rules and Create Target Rule Related Products With Attribute Conditions Test"
- filename: "AdminUpdateCrossSellsTargetRuleToRelatedProductsAndVerifyFrontEndTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminUpdateCrossSellsTargetRuleToRelatedProductsAndVerifyFrontEndTest"
      title: "Update CrossSells Target Rule To Related Products And Verify FrontEnd"
      description: "Test log in to Related Product Rules, Update Target Rule For Cross-sells Product And Verify FrontEnd Test"
- filename: "AdminDeleteTargetRuleRelatedWithPlaceholdersTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminDeleteTargetRuleRelatedWithPlaceholdersTest"
      title: "Admin Delete Target Rule Related With Placeholders Test"
      description: "Test log in to Related Product Rules and Delete Target Rule Related With Placeholders Test"
- filename: "AdminUpdateUpSellsTargetRuleToRelatedProductsAndVerifyFrontEndTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminUpdateUpSellsTargetRuleToRelatedProductsAndVerifyFrontEndTest"
      title: "Update UpSells Target Rule To Related Products And Verify FrontEnd"
      description: "Test log in to Related Product Rules, Update Target Rule For Up-sells Product And Verify FrontEnd Test"
- filename: "AdminCreateTargetRuleRelatedProductsAndVerifyFrontendTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminCreateTargetRuleRelatedProductsAndVerifyFrontendTest"
      title: "Admin Create Target Rule Related Products And Verify Frontend Test"
      description: "Test log in to Related Product Rules and Create Target Rule Related Products Test"
- filename: "AdminDeleteTargetRuleUpSellsWithPlaceholdersTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminDeleteTargetRuleUpSellsWithPlaceholdersTest"
      title: "Admin Delete Target Rule UpSells With Placeholders Test"
      description: "Test log in to Related Product Rules and Delete Target Rule Up-Sells With Placeholders Test"
- filename: "AdminUpdateRelatedTargetRuleToCrossSellsAndVerifyFrontEndTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminUpdateRelatedTargetRuleToCrossSellsAndVerifyFrontEndTest"
      title: "Update Related Target Rule To CrossSells And Verify FrontEnd"
      description: "Test log in to Related Product Rules, Update Target Rule For Cross-sells Product And Verify FrontEnd Test"
- filename: "AdminUpdateUpSellsTargetRuleToUpSellsInactiveAndVerifyFrontEndTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminUpdateUpSellsTargetRuleToUpSellsInactiveAndVerifyFrontEndTest"
      title: "Update UpSells Target Rule To UpSells Inactive And Verify FrontEnd"
      description: "Test log in to Related Product Rules, Update Target Rule For UpSells And Verify FrontEnd Test"
- filename: "AdminUpdateCrossSellsTargetRuleWithCustomerSegmentToInactiveAndVerifyFrontEndTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminUpdateCrossSellsTargetRuleWithCustomerSegmentToInactiveAndVerifyFrontEndTest"
      title: "Update CrossSells Target Rule With Customer Segment To Inactive And Verify FrontEnd"
      description: "Test log in to Related Product Rules, Update Target Rule For Cross-sells With Customer Segment And Verify FrontEnd Test"
- filename: "AdminDeleteTargetRuleCrossSellsWithPlaceholdersTest.xml"
  module: "TargetRule"
  tests:
    - testname: "AdminDeleteTargetRuleCrossSellsWithPlaceholdersTest"
      title: "Admin Delete Target Rule CrossSells With Placeholders Test"
      description: "Test log in to Related Product Rules and Delete Target Rule CrossSells With Placeholders Test"
- filename: "StoreFrontCheckingGiftOptionsTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "StoreFrontCheckingGiftOptionsTest"
      title: "Checking Gift Options on front end order page"
      description: "Admin should be able to control gift options"
- filename: "AdminCreateGiftWrappingForMainWebsiteTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "AdminCreateGiftWrappingForMainWebsiteTest"
      title: "Create Gift Wrapping for Main Website"
      description: "Admin should be able to create Gift Wrapping for Main Website"
- filename: "GiftWrappingCanBeDisabledForSpecificProductTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "GiftWrappingCanBeDisabledForSpecificProductTest"
      title: "Verify that Gift Wrapping can be disabled for specific product"
      description: "Verify that Gift Wrapping can be disabled for specific product"
- filename: "StorefrontGiftWrappingWithMultishippingCheckoutWhenCartPageIsOpenedInAnotherTabTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "StorefrontGiftWrappingWithMultishippingCheckoutWhenCartPageIsOpenedInAnotherTabTest"
      title: "Process multishipping checkout with gift wrapping when Cart page is opened in another tab"
      description: "Process multishipping checkout with gift wrapping when Cart page is opened in another tab"
- filename: "CustomerCanNotApplyGiftOptionsForVirtualProductsTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "CustomerCanNotApplyGiftOptionsForVirtualProductsTest"
      title: "Customer can't apply Gift Options for Virtual Products and can apply for Simple if Merchant enables all Gift Options"
      description: "Customer can't apply Gift Options for Virtual Products and can apply for Simple if Merchant enables all Gift Options"
- filename: "GiftWrappingCanBeAppliedOnOrderLevelTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "GiftWrappingCanBeAppliedOnOrderLevelTest"
      title: "Verify that Gift Wrapping can be applied on order level for main website"
      description: "Verify that Gift Wrapping can be applied on order level for main website"
- filename: "AdminStoresGiftWrappingNavigateMenuTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "AdminStoresGiftWrappingNavigateMenuTest"
      title: "Admin stores gift wrapping navigate menu test"
      description: "Admin should be able to navigate to Stores &gt; Gift Wrapping"
- filename: "AdminSeeBaseCurrencySymbolForPriceTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "AdminSeeBaseCurrencySymbolForPriceTest"
      title: "Admin is able to see the default base currency symbol for Price field"
      description: "Admin should be able to see the default currency symbol for price field"
- filename: "StorefrontGiftWrappingCanBeAppliedOnOrderLevelAndOrderItemForAdditionalWebsiteTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "StorefrontGiftWrappingCanBeAppliedOnOrderLevelAndOrderItemForAdditionalWebsiteTest"
      title: "Verify that Gift Wrapping can be applied on order level for additional website"
      description: "Verify that Gift Wrapping can be applied on order level for additional website"
- filename: "StorefrontAddGiftWrappingToProductInCartTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "StorefrontAddGiftWrappingToProductInCartTest"
      title: "Storefront add gift wrapping to product in cart test"
      description: "Update Gift Wrapping for items"
- filename: "StorefrontCheckoutWithGiftOptionsAndMultipleAddressesTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "StorefrontCheckoutWithGiftOptionsAndMultipleAddressesTest"
      title: "Saving gift options with multi-address checkout"
      description: "Saving gift options with multi-address checkout"
- filename: "StorefrontVerifyThatGiftWrappingCanBeAppliedOnItemLevelTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "StorefrontVerifyThatGiftWrappingCanBeAppliedOnItemLevelTest"
      title: "Verify that Gift Wrapping can be applied on item level"
      description: "Verify that Gift Wrapping can be applied on item level"
- filename: "GiftWrappingSelectionTest.xml"
  module: "GiftWrapping"
  tests:
    - testname: "GiftWrappingSelectionTest"
      title: "Displaying of Gift wrapping selection in shopping cart"
      description: "Displaying of Gift wrapping selection in shopping cart"
- filename: "StorefrontDynamicBlockBasedOnSegmentDisplayedCorrectlyTest.xml"
  module: "BannerCustomerSegment"
  tests:
    - testname: "StorefrontDynamicBlockBasedOnSegmentDisplayedCorrectlyTest"
      title: "Dynamic Block based on segment is displayed correctly for visitor"
      description: "Dynamic Block based on segment is displayed correctly for visitor"
- filename: "StoreFrontAddProductsToWishListWithMultipleWishlistsEnabledTest.xml"
  module: "MultipleWishlist"
  tests:
    - testname: "StoreFrontAddProductsToWishListWithMultipleWishlistsEnabledTest"
      title: "Add products to wishlist from Category page with multiple wishlist enabled"
      description: "Registered customer should be able to add products from category page to wishlist when multiple wishlist enabled"
- filename: "MultipleWishlistsActionAvailableInRecentlyViewWidgetTest.xml"
  module: "MultipleWishlist"
  tests:
    - testname: "MultipleWishlistsActionAvailableInRecentlyViewWidgetTest"
      title: "Multiple wishlists action available in recently view widget"
      description: "Multiple wishlists action available in recently view widget"
- filename: "StorefrontCreateMultipleWishlistTest.xml"
  module: "MultipleWishlist"
  tests:
    - testname: "StorefrontCreateMultipleWishlistTest"
      title: "Creation new wishlists when multiple wish lists is enabled"
      description: "Wish List should be created. System should be displays all changes on first browser after refreshing category page."
- filename: "StorefrontCheckPageTitleVisibilityTest.xml"
  module: "MultipleWishlist"
  tests:
    - testname: "StorefrontCheckPageTitleVisibilityTest"
      title: "The page title should be visible even after disabling the wishlist"
      description: "The page title should be visible even after disabling the wishlist."
- filename: "AdminReportsWishListsNavigateMenuTest.xml"
  module: "MultipleWishlist"
  tests:
    - testname: "AdminReportsWishListsNavigateMenuTest"
      title: "Admin reports wish lists navigate menu test"
      description: "Admin should be able to navigate to Reports &gt; Wish Lists"
- filename: "StorefrontValidateWishlistCreationTest.xml"
  module: "MultipleWishlist"
  tests:
    - testname: "StorefrontValidateWishlistCreationTest"
      title: "Validating the wishlist name before saving attempt"
      description: "The wishlist should be validated while trying to be created."
- filename: "StorefrontMultipleWishlistChangeWishlistNameTest.xml"
  module: "MultipleWishlist"
  tests:
    - testname: "StorefrontMultipleWishlistChangeWishlistNameTest"
      title: "Change wishlist name with multiple wishlist enabled"
      description: "Registered customer should be able to change wishlist name when multiple wishlist enabled"
- filename: "StorefrontCartPriceRuleQuantityTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "StorefrontCartPriceRuleQuantityTest"
      title: ""
      description: ""
- filename: "AdminCreateCartPriceRuleForGeneratedCouponTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminCreateCartPriceRuleForGeneratedCouponTest"
      title: ""
      description: ""
- filename: "AdminCreateFixedAmountWholeCartDiscountTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminCreateFixedAmountWholeCartDiscountTest"
      title: ""
      description: ""
- filename: "CreditMemoTotalAfterShippingDiscountTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "CreditMemoTotalAfterShippingDiscountTest"
      title: ""
      description: ""
- filename: "AdminCreateFixedAmountDiscountTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminCreateFixedAmountDiscountTest"
      title: ""
      description: ""
- filename: "AdminStagingDashboardProvideAbilityToViewEditForUpdatesWithCartPriceRuleTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminStagingDashboardProvideAbilityToViewEditForUpdatesWithCartPriceRuleTest"
      title: "[Staging] Cart Price Rule - Staging Dashboard provide ability to View/Edit for Updates with Cart Price Rule"
      description: "[Staging] Cart Price Rule - Staging Dashboard provide ability to View/Edit for Updates with Cart Price Rule"
- filename: "AdminCreatePercentOfProductPriceTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminCreatePercentOfProductPriceTest"
      title: ""
      description: ""
- filename: "StorefrontCartPriceRuleSubtotalTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "StorefrontCartPriceRuleSubtotalTest"
      title: ""
      description: ""
- filename: "StorefrontCartPriceRuleStateTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "StorefrontCartPriceRuleStateTest"
      title: ""
      description: ""
- filename: "AdminCreateCartPriceRuleForCouponCodeTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminCreateCartPriceRuleForCouponCodeTest"
      title: ""
      description: ""
- filename: "AdminCartPriceRuleSelectFromExistingScheduledUpdateTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminCartPriceRuleSelectFromExistingScheduledUpdateTest"
      title: "[Staging] Cart Price Rule &gt;&gt; Schedule New Update - Select from existing Scheduled Update"
      description: "[Staging] Cart Price Rule &gt;&gt; Schedule New Update - Select from existing Scheduled Update"
- filename: "StorefrontCartPriceRulePostcodeTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "StorefrontCartPriceRulePostcodeTest"
      title: ""
      description: ""
- filename: "AdminDeleteActiveSalesRuleWithComplexConditionsAndVerifyDeleteMessageTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminDeleteActiveSalesRuleWithComplexConditionsAndVerifyDeleteMessageTest"
      title: ""
      description: ""
- filename: "StorefrontApplyCartPriceRuleToOrderTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "StorefrontApplyCartPriceRuleToOrderTest"
      title: "[Staging] Cart Price Rule &gt;&gt; Schedule New Update - Apply Cart Price Rule to frontend-Store Order"
      description: "Staging Dashboard provide ability to View/Edit for Updates with Cart Price Rule"
- filename: "AdminCreateBuyXGetYFreeTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminCreateBuyXGetYFreeTest"
      title: ""
      description: ""
- filename: "CartPriceRuleForConfigurableProductTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "CartPriceRuleForConfigurableProductTest"
      title: ""
      description: ""
- filename: "StorefrontCartPriceRuleCountryTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "StorefrontCartPriceRuleCountryTest"
      title: ""
      description: ""
- filename: "AdminCartPriceRuleAssignToTheExistingUpdateTest.xml"
  module: "SalesRuleStaging"
  tests:
    - testname: "AdminCartPriceRuleAssignToTheExistingUpdateTest"
      title: "[Staging] Cart Price Rule &gt;&gt; Assign to the existing Update"
      description: "[Staging] Cart Price Rule &gt;&gt; Assign to the existing Update"
- filename: "AdminCreateCatalogPriceRuleToPercentTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminCreateCatalogPriceRuleToPercentTest"
      title: ""
      description: ""
- filename: "AdminCreateCatalogPriceRuleToFixedTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminCreateCatalogPriceRuleToFixedTest"
      title: ""
      description: ""
- filename: "AdminCreateCatalogPriceRuleByPercentTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminCreateCatalogPriceRuleByPercentTest"
      title: ""
      description: ""
- filename: "AdminCreateCatalogPriceRuleForCustomerGroupTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminCreateCatalogPriceRuleForCustomerGroupTest"
      title: ""
      description: ""
- filename: "AdminCreateCatalogPriceRuleByFixedTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminCreateCatalogPriceRuleByFixedTest"
      title: ""
      description: ""
- filename: "AdminShouldBeAbleToCreateSingleFutureUpdateWithEndDateFromCatalogRulePageTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminShouldBeAbleToCreateSingleFutureUpdateWithEndDateFromCatalogRulePageTest"
      title: "Admin should be able to create Single Future Update with end date from Catalog Rule Page"
      description: "Admin should be able to create Single Future Update with end date from Catalog Rule Page"
- filename: "ApplyCatalogPriceRuleByProductAttributeTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "ApplyCatalogPriceRuleByProductAttributeTest"
      title: ""
      description: ""
- filename: "AdminDeleteCatalogPriceRuleTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminDeleteCatalogPriceRuleTest"
      title: ""
      description: ""
- filename: "AdminScheduleUpdateForCatalogPriceRuleWithDateAttributeTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminScheduleUpdateForCatalogPriceRuleWithDateAttributeTest"
      title: "Schedule update for catalog price rule for date attribute"
      description: "Schedule update for catalog price rule for date attribute"
- filename: "AdminApplyCatalogRuleForConfigurableProductWithSpecialPricesTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminApplyCatalogRuleForConfigurableProductWithSpecialPricesTest"
      title: ""
      description: ""
- filename: "ApplyCatalogRuleForSimpleAndConfigurableProductTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "ApplyCatalogPriceRuleForSimpleProductAndConfigurableProductTest"
      title: ""
      description: ""
- filename: "AdminDisplayingCartAndCatalogPriceRulesGridsTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminDisplayingCartAndCatalogPriceRulesGridsTest"
      title: "Displaying Cart/Catalog Price Rules grids"
      description: "Displaying Cart/Catalog Price Rules grids"
- filename: "AdminApplyCatalogPriceRuleTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminApplyCatalogPriceRuleTest"
      title: "Apply Catalog Price Rule in Magento EE"
      description: "Apply Catalog Price Rule in Magento EE"
- filename: "AdminCreateInactiveCatalogPriceRuleTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminCreateInactiveCatalogPriceRuleTest"
      title: ""
      description: ""
- filename: "AdminEnableAttributeIsUndefinedCatalogPriceRuleTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminEnableAttributeIsUndefinedCatalogPriceRuleTest"
      title: ""
      description: ""
- filename: "AdminShouldBeAbleToCreateSingleFutureUpdateWithNoEndDateFromCatalogRulePageTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminShouldBeAbleToCreateSingleFutureUpdateWithNoEndDateFromCatalogRulePageTest"
      title: "Admin should be able to create Single Future Update with no end date from Catalog Rule Page"
      description: "Admin should be able to create Single Future Update with no end date from Catalog Rule Page"
- filename: "AdminApplyCatalogRuleByCategoryTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "AdminApplyCatalogRuleByCategoryTest"
      title: ""
      description: ""
- filename: "ApplyCatalogRuleForSimpleProductAndFixedMethodTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "ApplyCatalogRuleForSimpleProductAndFixedMethodTest"
      title: ""
      description: ""
- filename: "ApplyCatalogRuleForSimpleProductWithCustomOptionsTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "ApplyCatalogRuleForSimpleProductWithCustomOptionsTest"
      title: ""
      description: ""
- filename: "ApplyCatalogRuleForSimpleProductForNewCustomerGroupTest.xml"
  module: "CatalogRuleStaging"
  tests:
    - testname: "ApplyCatalogRuleForSimpleProductForNewCustomerGroupTest"
      title: ""
      description: ""
- filename: "StorefrontSpecialPriceBundleProductInCartTest.xml"
  module: "BundleStaging"
  tests:
    - testname: "StorefrontSpecialPriceBundleProductInCartTest"
      title: ""
      description: ""
- filename: "AdminBundleProductUpdateTestEndDateTest.xml"
  module: "BundleStaging"
  tests:
    - testname: "AdminBundleProductUpdateTestEndDateTest"
      title: "Admin should be able to create Single Future Update with end date from Bundle Product Page"
      description: "Admin should be able to create Single Future Update with end date from Bundle Product Page"
- filename: "AdminBundleProductUpdateTestNoEndDateTest.xml"
  module: "BundleStaging"
  tests:
    - testname: "AdminBundleProductUpdateTestNoEndDateTest"
      title: "Admin should be able to create Single Future Update with no end date from Bundle Product Page"
      description: "Admin should be able to create Single Future Update with no end date from Bundle Product Page"
- filename: "AdminBasicBundleProductAttributesTest.xml"
  module: "BundleStaging"
  tests:
    - testname: "AdminBasicBundleProductAttributesTest"
      title: ""
      description: ""
- filename: "NewProductsListWidgetBundleProductTest.xml"
  module: "BundleStaging"
  tests:
    - testname: "NewProductsListWidgetBundleProductTest"
      title: ""
      description: ""
- filename: "AdminSystemSystemReportNavigateMenuTest.xml"
  module: "Support"
  tests:
    - testname: "AdminSystemSystemReportNavigateMenuTest"
      title: "Admin system &gt; system report navigate menu test"
      description: "Admin should be able to navigate to System &gt; System Report"
- filename: "AdminSettingCustomerPhoneNumberTest.xml"
  module: "CustomAttributeManagement"
  tests:
    - testname: "AdminSettingCustomerPhoneNumberTest"
      title: "Settings of customer phone number field (phone number is optional)."
      description: "When Phone Number field is optional, new customer should be created without phone number"
- filename: "AdminTemporaryUpdateWithStartDateLessAndDateBiggerThanStartDateOfExistingUpdateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminTemporaryUpdateWithStartDateLessAndDateBiggerThanStartDateOfExistingUpdateTest"
      title: "Temporary Update with start date less than start date of existing update and end date bigger than start date of existing update."
      description: "Temporary Update with start date less than start date of existing update and end date bigger than start date of existing update."
- filename: "AdminCheckPreviewButtonOpensNewTabTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminCheckPreviewButtonOpensNewTabTest"
      title: "Staging preview 'button' open in a new tab for view"
      description: "Staging preview 'button' open in a new tab for view"
- filename: "AdminTemporaryUpdateAsPartOfAnotherUpdateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminTemporaryUpdateAsPartOfAnotherUpdateTest"
      title: "Create Update as a part of another Update"
      description: "The purpose of this end-to-end scenario is testing of ability to create Staging Update from single update in the example of single product update"
- filename: "AdminScheduledUpdateMoveToAnotherCampaignTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminScheduledUpdateMoveToAnotherCampaignTest"
      title: "Scheduled Update: Move to Another Campaign"
      description: "Purpose of this test is to check functionality of moving the new update to another campaign."
- filename: "AdminCheckSavingProdActiveScheduledUpdateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminCheckSavingProdActiveScheduledUpdateTest"
      title: "Saving product with an attribute which requires a Unique Value when there is an active Scheduled Update"
      description: "Check saving product with an attribute with a Unique Value when there is an active Scheduled Update"
- filename: "AdminEditSingleUpdateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminEditSingleUpdateTest"
      title: "Edit Single Update"
      description: "The purpose of this end-to-end scenario is testing of business use case 'Edit single future update'."
- filename: "AdminPermanentUpdateWithStartDateInRangeAlreadyExistsTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminPermanentUpdateWithStartDateInRangeAlreadyExistsTest"
      title: "Permanent Update with start date in range already exists"
      description: "The purpose of this end-to-end scenario is testing of business use case 'Create Single Update for products' on backend, preview mode and front-end."
- filename: "AdminDeleteTheUpdateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminDeleteTheUpdateTest"
      title: "Delete The Update"
      description: "The purpose of this end-to-end scenario is testing of ability to create update from single update in the example of single product update"
- filename: "AdminMoveUpdateToAnotherExistingUpdateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminMoveUpdateToAnotherExistingUpdateTest"
      title: "Move Update to Another existing Update"
      description: "Move Update to Another existing Update"
- filename: "AdminTemporaryUpdateWithStartAndDateBeforeExistingUpdateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminTemporaryUpdateWithStartAndDateBeforeExistingUpdateTest"
      title: "Temporary Update with start and end date before existing update."
      description: "Temporary Update with start and end date before existing update."
- filename: "AdminCopySingleUpdateToAnotherUpdateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminCopySingleUpdateToAnotherUpdateTest"
      title: "Copy Single Update to Another Update"
      description: "The purpose of this end-to-end scenario is testing of business use case 'Copy Single Update for products in another update' on backend, preview mode and front-end"
- filename: "AdminVerifyOrderCanNotBePlacedOnStagingPreviewTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminVerifyOrderCanNotBePlacedOnStagingPreviewTest"
      title: "[Staging] Verify that order can not be placed on Staging Preview"
      description: "[Staging] Verify that order can not be placed on Staging Preview"
- filename: "AdminPermanentUpdateWithStartDateBeforeExistedRangeTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminPermanentUpdateWithStartDateBeforeExistedRangeTest"
      title: "Permanent Update with start date before existed range"
      description: "The purpose of this end-to-end scenario is testing of business use case 'Create Single Update for products' on backend, preview mode and front-end."
- filename: "AdminPermanentUpdateWithStartDateAfterExistedRangeTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminPermanentUpdateWithStartDateAfterExistedRangeTest"
      title: "Permanent Update with start date after existed range"
      description: "Permanent Update with start date after existed range"
- filename: "AdminPermanentUpdateWithStartDateLessThanCurrentDateTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminPermanentUpdateWithStartDateLessThanCurrentDateTest"
      title: "Permanent Update with start date less than current date"
      description: "Permanent Update with start date less than current date"
- filename: "AdminCheckCMSBlockStagedOnWidgetTest.xml"
  module: "Staging"
  tests:
    - testname: "AdminCheckCMSBlockStagedOnWidgetTest"
      title: "Check that CMS block status is staged on a widget."
      description: "Check CMS block status is staged on a widget."
- filename: "CreationScheduledUpdateForStagingDashboardTest.xml"
  module: "Staging"
  tests:
    - testname: "CreationScheduledUpdateForStagingDashboardTest"
      title: "creating scheduled update for staging dashboard with max year value"
      description: "creating scheduled update for staging dashboard with max year value"
- filename: "StoreFrontCustomerCustomAttributesOrderPlacementTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StoreFrontCustomerCustomAttributesOrderPlacementTest"
      title: "Check order placement with custom customer address attributes"
      description: "Check order placement with custom customer address attributes"
- filename: "CheckMandatoryCustomerAddressAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CheckMandatoryCustomerAddressAttributeTest"
      title: "Check mandatory Customer Address Attribute which was override"
      description: "Check mandatory Customer Address Attribute which was override"
- filename: "UpdateMultipleSelectCustomerAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "UpdateMultipleSelectCustomerAttributeTest"
      title: "Update multiple select customer attribute test"
      description: "Update multiple select customer attribute"
- filename: "AdminDeleteMultiSelectTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteMultiSelectTypeCustomerCustomAttributeTest"
      title: "Delete multi select type customer custom attribute"
      description: "Delete multi select type customer custom attribute and verify in customer attribute grid"
- filename: "CreateCustomAddressAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CreateCustomAddressAttributeTest"
      title: "Create custom address attribute test"
      description: "Create custom address attribute"
- filename: "AdminDeleteMultipleLineTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteMultipleLineTypeCustomerCustomAttributeTest"
      title: "Delete multiple line type customer custom attribute"
      description: "Delete multiple line type customer custom attribute, verify in customer edit page, attribute grid and customer segment"
- filename: "ValidateDropdownAttributeCodeOfCustomerAttributesTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "ValidateDropdownAttributeCodeOfCustomerAttributesTest"
      title: "Validate dropdown attribute code of customer attributes test"
      description: "Validate dropdown attribute code of customer attributes"
- filename: "UpdateFileCustomerAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "UpdateFileCustomerAttributeTest"
      title: "Update file customer attribute test"
      description: "Update file customer attribute"
- filename: "CreateVisibleCustomerAddressAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CreateVisibleCustomerAddressAttributeTest"
      title: "Create visible customer address attribute test"
      description: "Create visible customer address attribute"
- filename: "UpdateTextAreaCustomerAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "UpdateTextAreaCustomerAttributeTest"
      title: "Update text area customer attribute test"
      description: "Update text area customer attribute"
- filename: "UpdateMultipleLineCustomerAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "UpdateMultipleLineCustomerAttributeTest"
      title: "Update multiple line customer attribute test"
      description: "Update multiple line customer attribute"
- filename: "GuestCheckoutWithCustomerAddressAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "GuestCheckoutWithCustomerAddressAttributeTest"
      title: "Custom dropdown customer address attribute option id showing on guest checkout"
      description: "Checking drop down values"
- filename: "AdminDateFormatOnAttributePageTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDateFormatOnAttributePageTest"
      title: "Date format localization on Attribute creating page"
      description: "Check that Date format localization on Attribute creating page is correct"
- filename: "StorefrontCustomerCustomAttributesMultishippingFormTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StorefrontCustomerCustomAttributesMultishippingFormTest"
      title: "Check customer Custom Attributes displays correctly on multishipping new address form"
      description: "Check customer Custom Attributes displays correctly on multishipping new address form"
- filename: "StoreFrontCustomerCustomAttributesShowInSeparateBillingAddressFormTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StoreFrontCustomerCustomAttributesShowInSeparateBillingAddressFormTest"
      title: "MC-5650: Custom customer address attributes not displayed on Shipping or billing address form on B2B"
      description: "Custom address attributes are visible on the separate billing address form on checkout"
- filename: "StorefrontCustomerCustomAttributesTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StorefrontCustomerCustomAttributesTest"
      title: "Check customer Custom Attributes displays correctly"
      description: "Customer Custom Attributes should displays correctly"
- filename: "AdminStoresCustomerNavigateMenuTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminStoresCustomerNavigateMenuTest"
      title: "Admin stores customer navigate menu test"
      description: "Admin should be able to navigate to Stores &gt; Customer"
- filename: "StorefrontCreateOrderWithFileUploadForCustomerTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StorefrontCreateOrderWithFileUploadForCustomerTest"
      title: "Create order from storefront with file upload for registered customer"
      description: "Create order from storefront with file upload for registered customer"
- filename: "AdminDeleteTextAreaTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteTextAreaTypeCustomerCustomAttributeTest"
      title: "Delete text area type customer custom attribute"
      description: "Delete text area type customer custom attribute, verify in storefront, customer attribute grid and customer segment"
- filename: "DefaultValueForPrefixTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "DefaultValueForPrefixTest"
      title: "Checking default value for Prefix in checkout"
      description: "Checking default value for Prefix in checkout"
- filename: "UpdateImageFileCustomerAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "UpdateImageFileCustomerAttributeTest"
      title: "Update image file customer attribute test"
      description: "Update image file customer attribute"
- filename: "AdminCreateTextAreaTypeCustomCustomerAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminCreateTextAreaTypeCustomCustomerAttributeTest"
      title: "Create text area type custom customer attribute"
      description: "Create text area type custom customer attribute and verify in attribute grid,customer segment, customer registration form and default value on registration"
- filename: "AdminDeleteYesNoTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteYesNoTypeCustomerCustomAttributeTest"
      title: "Delete Yes/No type customer custom attribute"
      description: "Delete Yes/No type customer custom attribute and verify in customer attribute grid"
- filename: "StorefrontCreateCustomerWithDateOfBirthTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StorefrontCreateCustomerWithDateOfBirthTest"
      title: ""
      description: ""
- filename: "AdminStoresCustomerAddressNavigateMenuTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminStoresCustomerAddressNavigateMenuTest"
      title: "Admin stores customer address navigate menu test"
      description: "Admin should be able to navigate to Stores &gt; Customer Address"
- filename: "AdminDeleteDropDownTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteDropDownTypeCustomerCustomAttributeTest"
      title: "Delete dropdown type customer custom attribute"
      description: "Delete dropdown type customer custom attribute, verify in customer attribute grid and customer segment"
- filename: "AdminVerifyFileAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CustomerAttributesAdminVerifyFileTest"
      title: "Custom Customer Attributes can correctly upload and store a file"
      description: "Custom Customer Attributes can correctly upload and store a file"
- filename: "ValidateRequireCustomerAddressAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "ValidateRequireCustomerAddressAttributeTest"
      title: "Validate require customer address attribute test"
      description: "Validate require customer address attribute"
- filename: "CheckCustomerAddressAttributesDisabledFieldsTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CheckCustomerAddressAttributesDisabledFieldsTest"
      title: "Check customer address attributes disabled fields test"
      description: "Check customer address attributes disabled fields"
- filename: "DefaultCustomerAddressAttributesVisibilityTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "DefaultCustomerAddressAttributesVisibilityTest"
      title: "Default customer address attributes visibility test"
      description: "Default customer address attributes visibility test"
- filename: "CustomerAttributesInvalidCustomerAccountTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CustomerAttributesInvalidCustomerAccountTest"
      title: "Customer attributes save values in case of invalid Customer Account creation"
      description: "Customer attributes save values in case of invalid Customer Account creation"
- filename: "CustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CustomerCustomAttributeDefaultFormVisibilityTest"
      title: "Check default customer custom attribute visibility on forms"
      description: "Check that attribute appears in the appropriate forms when Use in Forms is left empty"
- filename: "StorefrontRegisterCustomerWithCustomerImageAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StorefrontRegisterCustomerWithCustomerImageAttributeTest"
      title: "Storefront register customer with customer image attribute test"
      description: "Verify that customer can register on storefront with required image attribute"
- filename: "CheckCustomerAttributesDisabledFieldsTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CheckCustomerAttributesDisabledFieldsTest"
      title: "Check customer attributes disabled fields test"
      description: "Check customer attributes disabled fields"
- filename: "CreateNewAccountAfterCheckoutTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CreateNewAccountAfterCheckoutTest"
      title: "Creation of new account after checkout with added required customer's custom attribute"
      description: "Creation of new account after checkout with added required customer's custom attribute"
- filename: "StoreFrontCheckoutWithCustomerAddressAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StoreFrontCheckoutWithCustomerAddressAttributeTest"
      title: "Verify Custom dropdown customer address attribute option id showing on checkout"
      description: "Checking drop down values"
- filename: "StoreFrontSwitchStoreViewTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "StoreFrontSwitchStoreViewTest"
      title: "Managing labels for customer attribute while creation new account"
      description: "Managing labels for customer attribute while creation new account"
- filename: "AdminCreateDateTypeCustomCustomerAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminCreateDateTypeCustomCustomerAttributeTest"
      title: "Create date type custom customer attribute"
      description: "Create date type Custom Customer Attribute and verify in custom attribute grid, customer segment and order"
- filename: "AdminCustomerCustomAddressMultilineAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminCustomerCustomAddressMultilineAttributeTest"
      title: "Multiline customer address attribute will load correctly"
      description: "Check that a multiline customer custom address attribute will correctly load saved data in the admin"
- filename: "CustomerCustomAddressAttributeDefaultFormVisibilityTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CustomerCustomAddressAttributeDefaultFormVisibilityTest"
      title: "Check default customer address custom attribute visibility on forms"
      description: "Check that attribute appears in the appropriate forms when Use in Forms is left empty"
- filename: "AdminCreateCustomerCustomAttributeAndSaveCustomerWithRequiredCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminCreateCustomerCustomAttributeAndSaveCustomerWithRequiredCustomAttributeTest"
      title: "Create custom customer attribute and save customer with required custom attribute with digit at the end"
      description: "Create custom customer attribute and save customer with required custom attribute with digit at the end"
- filename: "ValidateTextFieldAttributeCodeOfCustomerAttributesTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "ValidateTextFieldAttributeCodeOfCustomerAttributesTest"
      title: "Validate text field attribute code of customer attributes test"
      description: "Validate text field attribute code of customer attributes test"
- filename: "AdminDeleteImageFileTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteImageFileTypeCustomerCustomAttributeTest"
      title: "Delete image file type customer custom attribute"
      description: "Delete image file type customer custom attribute and verify in customer attribute grid"
- filename: "AdminDeleteFileTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteFileTypeCustomerCustomAttributeTest"
      title: "Delete file type customer custom attribute"
      description: "Delete file type customer custom attribute and verify in customer attribute grid"
- filename: "AdminDeleteTextFieldTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteTextFieldTypeCustomerCustomAttributeTest"
      title: "Delete text field type customer custom attribute"
      description: "Delete text field type customer custom attribute, verify in customer attribute grid and customer segment"
- filename: "AdminDeleteDateTypeCustomerCustomAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "AdminDeleteDateTypeCustomerCustomAttributeTest"
      title: "Delete date type customer custom attribute"
      description: "Delete date type customer custom attribute, verify in customer attribute grid, customer segment and orders"
- filename: "UpdateYesNoCustomerAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "UpdateYesNoCustomerAttributeTest"
      title: "Update yes no customer attribute test"
      description: "Update yes/no customer attribute"
- filename: "CreateNotVisibleCustomerAddressAttributeTest.xml"
  module: "CustomerCustomAttributes"
  tests:
    - testname: "CreateNotVisibleCustomerAddressAttributeTest"
      title: "Create not visible customer address attribute test"
      description: "Create not visible customer address attribute"
- filename: "AdminMarketingInvitationsNavigateMenuTest.xml"
  module: "Invitation"
  tests:
    - testname: "AdminMarketingInvitationsNavigateMenuTest"
      title: "Admin marketing invitations navigate menu test"
      description: "Admin should be able to navigate to Marketing &gt; Invitations"
- filename: "AdminReportsConversionsNavigateMenuTest.xml"
  module: "Invitation"
  tests:
    - testname: "AdminReportsConversionsNavigateMenuTest"
      title: "Admin reports conversions navigate menu test"
      description: "Admin should be able to navigate to Reports &gt; Conversions"
- filename: "AdminReportsInvitationsNavigateMenuTest.xml"
  module: "Invitation"
  tests:
    - testname: "AdminReportsInvitationsNavigateMenuTest"
      title: "Admin reports invitations navigate menu test"
      description: "Admin should be able to navigate to Reports &gt; Invitations"
- filename: "AdminReportsInvitedCustomersNavigateMenuTest.xml"
  module: "Invitation"
  tests:
    - testname: "AdminReportsInvitedCustomersNavigateMenuTest"
      title: "Admin reports invited customers navigate menu test"
      description: "Admin should be able to navigate to Reports &gt; Invited Customers"
- filename: "StorefrontVerifySecureURLRedirectInvitationTest.xml"
  module: "Invitation"
  tests:
    - testname: "StorefrontVerifySecureURLRedirectInvitationTest"
      title: "Verify Secure URLs For Storefront Invitation Pages"
      description: "Verify that the Secure URL configuration applies to the Invitation pages on the Storefront"
